var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.298,1,0.882]],["body/components/AppComponent.html",[0,0.492,1,1.543,2,1.421,3,0.387,4,0.34,5,1.183,6,1.183,7,1.183,8,0.34,9,3.086,10,1.008,11,1.928,12,1.928,13,2.802,14,1.539,15,5.336,16,1.543,17,1.543,18,1.667,19,4.801,20,1.961,21,4.801,22,0.251,23,0.504,24,4.462,25,0.437,26,0.031,27,1.008,28,0.657,29,0.598,30,3.497,31,0.598,32,3.69,33,0.669,34,0.542,35,1.956,36,3.69,37,3.69,38,0.34,39,0.598,40,1.183,41,1.539,42,1.539,43,0.785,44,1.812,45,1.183,46,1.135,47,1.183,48,1.183,49,1.008,50,1.183,51,1.008,52,1.183,53,1.008,54,0.95,55,1.092,56,1.183,57,1.008,58,1.183,59,1.008,60,1.183,61,1.008,62,1.183,63,1.008,64,1.183,65,1.008,66,1.183,67,1.183,68,1.008,69,1.008,70,0.929,71,0.929,72,1.183,73,0.929,74,1.183,75,0.023,76,0.023]],["title/injectables/AuthService.html",[77,1.122,78,1.886]],["body/injectables/AuthService.html",[3,0.431,4,0.378,8,0.378,13,2.394,22,0.279,23,0.539,26,0.032,28,0.731,29,0.665,31,0.953,33,0.608,34,0.602,38,0.378,39,0.665,69,1.531,75,0.024,76,0.024,77,1.784,78,2.998,79,2.175,80,3.431,81,1.531,82,4.085,83,1.293,84,5.876,85,4.497,86,4.914,87,4.914,88,4.102,89,1.193,90,1.647,91,4.102,92,5.876,93,4.102,94,4.085,95,4.102,96,4.295,97,3.431,98,4.102,99,2.989,100,2.658,101,2.394,102,4.102,103,1.214,104,3.742,105,1.676,106,5.136,107,3.431,108,4.102]],["title/directives/ColorDirective.html",[43,0.688,71,0.813]],["body/directives/ColorDirective.html",[3,0.333,4,0.292,8,0.292,10,0.866,11,1.284,22,0.216,23,0.456,25,0.681,26,0.032,27,1.351,28,0.881,29,0.903,31,0.997,33,0.585,34,0.466,38,0.292,39,0.514,43,0.924,46,0.924,70,0.799,71,1.092,75,0.021,76,0.021,81,1.66,89,0.924,90,2.02,103,1.284,105,1.296,109,2.653,110,4.947,111,4.947,112,4.947,113,4.947,114,4.947,115,3.162,116,2.799,117,2.799,118,2.533,119,4.34,120,4.448,121,3.63,122,3.205,123,3.173,124,4.34,125,4.34,126,4.34,127,1.852,128,4.34,129,5.75,130,3.173,131,3.173,132,3.173,133,3.173,134,1.773,135,1.634,136,1.185,137,3.173,138,4.34,139,2.653,140,3.604,141,3.173,142,1.682,143,3.604,144,2.311,145,2.311,146,3.173,147,3.63,148,3.173,149,3.173,150,3.173,151,3.173,152,3.173,153,3.173,154,2.812,155,3.173,156,3.173,157,3.173,158,1.537,159,3.173,160,3.173,161,3.173]],["title/interfaces/Filters.html",[162,1.32,163,1.713]],["body/interfaces/Filters.html",[3,0.46,4,0.404,8,0.404,22,0.298,23,0.562,25,0.712,26,0.032,27,1.577,33,0.633,38,0.404,54,0.867,75,0.025,76,0.025,116,2.848,117,2.848,142,2.323,162,1.79,163,2.836,164,1.65,165,3.665,166,3.897,167,3.897,168,3.742,169,4.382,170,3.665]],["title/components/LoadingComponent.html",[0,0.298,17,0.882]],["body/components/LoadingComponent.html",[0,0.463,1,0.892,2,1.311,3,0.343,4,0.301,5,1.048,6,1.048,7,1.048,8,0.301,10,0.892,11,1.901,12,1.884,14,1.42,16,0.892,17,1.47,18,1.538,22,0.301,23,0.465,25,0.524,26,0.032,28,0.789,29,0.718,31,0.718,33,0.687,34,0.48,38,0.301,39,0.53,40,1.048,41,1.42,42,1.42,43,0.696,44,1.726,45,1.048,46,1.069,47,1.048,48,1.048,49,0.892,50,1.048,51,0.892,52,1.048,53,0.892,54,0.912,55,0.967,56,1.048,57,0.892,58,1.048,59,0.892,60,1.048,61,0.892,62,1.048,63,0.892,64,1.048,65,0.892,66,1.048,67,1.048,68,0.892,69,0.892,70,0.823,71,0.823,72,1.048,73,0.823,74,1.048,75,0.021,76,0.021,81,1.372,85,3.226,120,3.704,171,2.381,172,2.733,173,2.145,174,2.145,175,4.322,176,5.023,177,3.659,178,3.704,179,5.023,180,4.429,181,3.386,182,2.932,183,4.429,184,3.268,185,2.87,186,3.268,187,1.583,188,1.048,189,3.268,190,3.268,191,1.583,192,1.908,193,2.381,194,3.268,195,1.908,196,3.226,197,2.733,198,3.268,199,3.268,200,2.733,201,3.268,202,3.268,203,3.268,204,3.268,205,3.268,206,3.268,207,2.733,208,3.268,209,3.268,210,2.733,211,2.381,212,2.733,213,2.381,214,2.585,215,2.733,216,2.381,217,3.268]],["title/components/LoginComponent.html",[0,0.298,49,0.882]],["body/components/LoginComponent.html",[0,0.439,1,0.805,2,1.221,3,0.31,4,0.272,5,0.946,6,0.946,7,0.946,8,0.272,10,0.805,11,1.876,12,1.856,14,1.323,16,0.805,17,0.805,18,1.433,20,1.686,22,0.201,23,0.433,25,0.563,26,0.032,27,1.127,28,1.001,29,0.911,31,0.97,33,0.642,34,0.433,35,1.564,38,0.272,39,0.772,40,0.946,41,1.323,42,1.323,43,0.628,44,1.653,45,0.946,46,1.013,47,0.946,48,0.946,49,1.408,50,0.946,51,0.805,52,0.946,53,0.805,54,0.88,55,0.873,56,0.946,57,0.805,58,0.946,59,0.805,60,0.946,61,0.805,62,0.946,63,0.805,64,0.946,65,0.805,66,0.946,67,0.946,68,0.805,69,0.805,70,0.742,71,0.742,72,0.946,73,1.526,74,0.946,75,0.02,76,0.02,81,1.655,82,3.467,83,1.039,86,4.311,89,0.878,94,3.467,96,3.451,97,2.467,99,2.149,103,1.221,104,3.006,105,1.205,107,2.467,118,2.409,127,1.722,136,1.127,158,2.305,188,0.946,218,2.467,219,3.006,220,4.311,221,3.981,222,4.127,223,4.127,224,3.755,225,2.674,226,2.778,227,2.674,228,2.674,229,2.674,230,3.084,231,2.674,232,4.096,233,3.006,234,2.95,235,2.149,236,2.95,237,3.006,238,2.95,239,1.911,240,2.149,241,1.911,242,2.149,243,1.911,244,2.149,245,2.149,246,1.205,247,4.127,248,2.95,249,4.127,250,2.95,251,2.95,252,2.95,253,2.95,254,4.127]],["title/components/NotFoundComponent.html",[0,0.298,51,0.882]],["body/components/NotFoundComponent.html",[0,0.456,1,0.865,2,1.283,3,0.333,4,0.292,5,1.016,6,1.016,7,1.016,8,0.292,10,0.865,11,1.894,12,1.876,14,1.39,16,0.865,17,0.865,18,1.506,20,1.771,22,0.215,23,0.455,25,0.585,26,0.031,27,1.184,28,0.947,29,0.862,31,0.932,33,0.659,34,0.465,35,1.679,38,0.292,39,0.801,40,1.016,41,1.39,42,1.39,43,0.674,44,1.704,45,1.016,46,1.052,47,1.016,48,1.016,49,0.865,50,1.016,51,1.451,52,1.016,53,0.865,54,0.902,55,0.938,56,1.016,57,0.865,58,1.016,59,0.865,60,1.016,61,0.865,62,1.016,63,0.865,64,1.016,65,0.865,66,1.016,67,1.016,68,0.865,69,0.865,70,0.797,71,0.797,72,1.016,73,1.547,74,1.016,75,0.021,76,0.021,81,1.451,83,1.091,89,0.674,118,2.53,127,1.849,136,0.865,219,3.158,225,2.809,226,2.885,227,2.809,228,2.809,229,2.809,230,3.203,231,3.724,232,4.187,233,3.158,235,2.308,239,2.053,240,2.308,241,2.053,242,2.308,243,2.053,244,2.308,245,2.308,246,1.294,255,2.649,256,2.649,257,2.649,258,4.134,259,3.203,260,3.203,261,4.943,262,4.335,263,4.335,264,2.053,265,3.168,266,3.168,267,3.168,268,4.335,269,3.168,270,4.335,271,3.168,272,4.335,273,3.168,274,3.168,275,3.168,276,3.168,277,3.168]],["title/directives/PageComponent.html",[43,0.688,73,0.813]],["body/directives/PageComponent.html",[3,0.402,4,0.353,8,0.353,22,0.26,23,0.516,24,4.541,25,0.643,26,0.032,27,1.342,28,1.021,29,0.929,31,1,33,0.678,34,0.562,35,2.029,38,0.353,39,0.88,43,1.046,70,0.963,73,1.237,75,0.023,76,0.023,81,1.656,83,1.237,89,0.815,103,1.133,118,2.869,122,3.518,127,2.234,136,1.342,139,3.201,188,1.227,225,3.518,226,3.599,227,3.518,228,3.518,229,3.518,230,3.712,231,3.518,239,3.185,241,3.185,243,3.185,278,3.201,279,4.915,280,4.915,281,3.828,282,3.828,283,3.828,284,3.828,285,3.828,286,3.828,287,3.201,288,2.788,289,3.828,290,3.828,291,3.828,292,3.828,293,3.828]],["title/interfaces/RequestStatus.html",[162,1.32,294,1.886]],["body/interfaces/RequestStatus.html",[3,0.446,4,0.391,8,0.391,22,0.289,23,0.551,25,0.621,26,0.032,27,1.624,38,0.563,75,0.025,76,0.025,90,1.996,103,1.761,158,3.112,162,1.735,164,1.599,175,4.644,294,3.634,295,3.093,296,3.093,297,3.324,298,2.751,299,3.324,300,3.093,301,2.751,302,3.093,303,3.093]],["title/interfaces/Task.html",[54,0.524,162,1.32]],["body/interfaces/Task.html",[3,0.417,4,0.366,8,0.366,22,0.27,23,0.528,25,0.745,26,0.032,27,1.671,33,0.595,38,0.366,54,0.815,75,0.024,76,0.024,90,1.77,116,2.795,117,2.795,135,1.893,142,2.104,162,1.621,164,1.494,297,3.223,304,3.318,305,3.389,306,3.389,307,2.812,308,4.856,309,3.762,310,3.389,311,3.367,312,4.661,313,2.891]],["title/components/TaskAddEditComponent.html",[0,0.298,53,0.882]],["body/components/TaskAddEditComponent.html",[0,0.351,1,0.551,2,0.923,3,0.212,4,0.186,5,0.646,6,0.646,7,0.646,8,0.186,10,0.551,11,1.767,12,1.734,14,0.999,16,0.551,17,0.551,18,1.083,20,1.274,22,0.137,23,0.327,26,0.032,28,0.873,29,0.897,31,0.856,33,0.677,34,0.296,38,0.186,39,0.327,40,0.646,41,0.999,42,0.999,43,0.429,44,1.375,45,0.646,46,0.811,47,0.646,48,0.646,49,0.551,50,0.646,51,0.551,52,0.646,53,1.171,54,0.959,55,1.866,56,0.646,57,0.551,58,0.646,59,0.551,60,0.646,61,0.551,62,0.646,63,0.551,64,0.646,65,0.551,66,0.646,67,0.646,68,0.551,69,0.551,70,0.507,71,0.507,72,0.646,73,0.507,74,0.646,75,0.015,76,0.015,83,0.785,89,0.663,90,1.375,105,1.274,116,2.407,117,2.574,136,0.851,142,1.069,173,1.51,174,1.51,187,0.977,188,0.646,246,0.824,259,2.469,264,1.307,301,2.778,305,1.819,306,1.819,307,1.51,308,4.415,309,2.02,311,2.709,314,2.872,315,3.511,316,1.686,317,1.819,318,2.469,319,3.586,320,3.187,321,3.187,322,3.811,323,3.187,324,3.811,325,3.187,326,3.187,327,2.776,328,3.117,329,3.117,330,3.377,331,2.469,332,3.187,333,3.877,334,3.877,335,3.811,336,2.778,337,4.288,338,2.016,339,2.016,340,2.607,341,2.016,342,2.607,343,2.016,344,2.607,345,2.016,346,2.469,347,2.016,348,2.607,349,2.016,350,2.607,351,3.117,352,5.279,353,3.117,354,2.776,355,3.117,356,3.811,357,2.776,358,3.117,359,3.117,360,3.117,361,4.288,362,3.117,363,3.117,364,2.607,365,3.117,366,2.607,367,2.016,368,1.686,369,1.686,370,1.307,371,1.686,372,1.469,373,1.686,374,1.686,375,1.686,376,2.016,377,1.686,378,2.016,379,1.686,380,1.469,381,2.016,382,1.469,383,2.016,384,2.016,385,2.016,386,2.016,387,3.117,388,3.117,389,3.117,390,3.117,391,3.117,392,4.288,393,3.117,394,3.117,395,3.117,396,3.586,397,3.117,398,3.117,399,3.117,400,3.124,401,2.607,402,2.607]],["title/components/TaskDeleteComponent.html",[0,0.298,57,0.882]],["body/components/TaskDeleteComponent.html",[0,0.465,1,0.901,2,1.319,3,0.346,4,0.304,5,1.058,6,1.058,7,1.058,8,0.304,10,0.901,11,1.904,12,1.886,14,1.429,16,0.901,17,0.901,18,1.548,20,1.821,22,0.224,23,0.468,26,0.031,28,0.794,29,0.723,31,0.818,33,0.64,34,0.485,38,0.304,39,0.535,40,1.058,41,1.429,42,1.429,43,0.702,44,1.733,45,1.058,46,1.074,47,1.058,48,1.058,49,0.901,50,1.058,51,0.901,52,1.058,53,0.901,54,1.038,55,0.977,56,1.058,57,1.476,58,1.058,59,0.901,60,1.058,61,0.901,62,1.058,63,0.901,64,1.058,65,0.901,66,1.058,67,1.058,68,0.901,69,0.901,70,0.831,71,0.831,72,1.058,73,0.831,74,1.058,75,0.021,76,0.021,83,1.122,89,0.702,136,0.901,173,2.159,174,2.159,187,1.598,188,1.058,246,1.348,259,3.271,264,2.138,305,2.602,310,2.602,314,2.866,323,4.221,327,3.677,330,3.677,331,3.271,340,3.728,342,3.728,368,2.76,369,2.76,370,2.138,402,3.728,403,3.938,404,2.76,405,4.238,406,4.457,407,4.457,408,5.406,409,3.3,410,3.3,411,3.3,412,3.3,413,4.457,414,3.728,415,4.457]],["title/components/TaskFilterComponent.html",[0,0.298,59,0.882]],["body/components/TaskFilterComponent.html",[0,0.321,1,0.478,2,0.826,3,0.184,4,0.161,5,0.561,6,0.561,7,0.561,8,0.161,10,0.478,11,1.718,12,1.681,14,0.894,16,0.478,17,0.478,18,0.969,22,0.19,23,0.293,25,0.513,26,0.032,28,0.966,29,0.879,31,0.95,33,0.693,34,0.257,38,0.161,39,0.284,40,0.561,41,0.894,42,0.894,43,0.373,44,1.272,45,0.561,46,0.844,47,0.561,48,0.561,49,0.478,50,0.561,51,0.478,52,0.561,53,0.478,54,0.932,55,0.518,56,0.561,57,0.478,58,0.561,59,1.083,60,0.561,61,0.478,62,0.561,63,0.478,64,0.561,65,0.478,66,0.561,67,0.561,68,0.478,69,0.478,70,0.441,71,0.441,72,0.561,73,0.441,74,0.561,75,0.013,76,0.013,81,1.261,83,0.702,89,0.922,103,0.518,105,0.715,116,2.36,117,2.523,134,0.715,135,0.659,136,1.261,142,0.928,163,2.103,164,1.05,166,1.808,167,3.139,168,3.025,171,1.275,177,2.534,178,2.333,181,2.316,185,1.808,188,0.561,191,0.848,192,1.022,195,1.022,196,1.275,197,1.464,200,3.318,207,1.464,211,1.275,213,2.032,214,3.025,216,1.275,246,0.715,260,2.254,297,2.03,306,1.022,307,1.921,309,1.808,311,0.928,314,3.132,317,1.628,318,2.254,320,2.909,321,2.909,325,2.909,326,2.909,332,2.909,333,3.624,334,3.624,336,2.571,344,2.333,346,2.254,348,2.333,350,2.333,371,1.464,372,1.275,373,1.464,374,3.861,375,1.464,377,1.464,379,1.464,380,1.275,382,1.275,400,3.664,401,2.333,416,4.303,417,1.464,418,3.478,419,3.967,420,3.478,421,2.909,422,3.478,423,3.478,424,3.478,425,3.478,426,2.79,427,3.478,428,3.478,429,3.478,430,3.478,431,3.478,432,3.624,433,4.333,434,3.157,435,3.967,436,3.967,437,2.79,438,1.75,439,1.75,440,1.75,441,1.75,442,2.79,443,1.75,444,2.89,445,2.79,446,1.75,447,2.79,448,1.75,449,1.75,450,3.478,451,1.75,452,3.478,453,1.75,454,1.464,455,2.79,456,1.75,457,1.75,458,2.79,459,1.75,460,1.75,461,2.79,462,1.75,463,1.75,464,1.75,465,1.464,466,1.75,467,1.75,468,1.808,469,1.275,470,1.275,471,1.275,472,1.275,473,1.275,474,1.275,475,1.464,476,1.75,477,1.75,478,1.75,479,1.75,480,1.75,481,1.75,482,1.75,483,1.75,484,1.808,485,1.75,486,1.134,487,1.464,488,1.134,489,1.75,490,1.75,491,1.75,492,3.967,493,4.617,494,2.333,495,3.478,496,2.333,497,2.79,498,2.79,499,2.333,500,2.79,501,2.333,502,1.75,503,3.967,504,4.333,505,1.75,506,1.75,507,3.478,508,1.75,509,1.75,510,2.79,511,1.75,512,1.75,513,2.79,514,2.79,515,1.75,516,2.79,517,2.79,518,1.75,519,1.75,520,1.75,521,3.478,522,1.75,523,1.134,524,1.75,525,1.75,526,1.75,527,1.464]],["title/components/TaskItemComponent.html",[0,0.298,61,0.882]],["body/components/TaskItemComponent.html",[0,0.377,1,0.617,2,1.006,3,0.237,4,0.208,5,0.725,6,0.725,7,0.725,8,0.208,10,0.617,11,1.802,12,1.802,14,1.09,16,0.617,17,0.617,18,1.181,20,1.389,22,0.154,23,0.357,25,0.607,26,0.032,27,1.242,28,0.606,29,0.737,31,0.887,33,0.709,34,0.332,38,0.208,39,0.366,40,0.725,41,1.09,42,1.09,43,0.481,44,1.458,45,0.725,46,1.091,47,0.725,48,0.725,49,0.617,50,0.725,51,0.617,52,0.725,53,0.929,54,1.029,55,1.21,56,0.725,57,0.929,58,0.725,59,0.617,60,0.725,61,1.242,62,0.725,63,0.617,64,0.725,65,0.617,66,0.725,67,0.725,68,0.617,69,0.617,70,0.569,71,1.145,72,0.725,73,0.569,74,0.725,75,0.016,76,0.016,81,1.399,83,0.856,89,1.038,103,1.21,115,2.477,134,1.67,135,1.539,136,1.529,140,2.477,154,2.203,164,0.851,173,1.647,174,1.647,181,2.991,185,2.203,187,1.094,188,0.725,192,1.319,195,1.319,246,0.923,259,2.649,264,1.464,297,2.386,310,1.985,311,2.901,314,2.968,315,1.464,319,2.844,327,2.978,330,2.477,331,2.203,370,1.464,396,2.844,403,1.646,405,2.477,421,3.419,444,1.646,465,1.89,471,1.646,486,2.203,487,1.89,528,4.078,529,1.89,530,3.4,531,4.088,532,4.088,533,2.649,534,3.4,535,3.4,536,3.419,537,2.386,538,4.548,539,4.548,540,3.313,541,2.386,542,2.26,543,2.844,544,2.26,545,2.649,546,2.26,547,2.26,548,3.4,549,2.26,550,3.4,551,2.26,552,3.419,553,2.844,554,2.26,555,2.26,556,1.89,557,2.26,558,1.89,559,2.26,560,2.26,561,2.26,562,4.088,563,1.89,564,2.26,565,2.844,566,2.844,567,2.26,568,2.203,569,1.646,570,2.26,571,2.26,572,2.26,573,2.26,574,2.844,575,3.4,576,3.4,577,3.804,578,4.548,579,4.548,580,3.4]],["title/components/TaskListComponent.html",[0,0.298,63,0.882]],["body/components/TaskListComponent.html",[0,0.466,1,0.905,2,1.324,3,0.348,4,0.306,5,1.063,6,1.063,7,1.063,8,0.306,10,0.905,11,1.905,12,1.888,14,1.434,16,0.905,17,0.905,18,1.553,20,1.827,22,0.225,25,0.392,26,0.032,31,0.538,33,0.669,34,0.487,38,0.306,39,0.538,40,1.063,41,1.434,42,1.434,43,0.706,44,1.737,45,1.063,46,1.077,47,1.063,48,1.063,49,0.905,50,1.063,51,0.905,52,1.063,53,0.905,54,1.039,55,0.981,56,1.063,57,0.905,58,1.063,59,0.905,60,1.063,61,1.479,62,1.063,63,1.479,64,1.063,65,0.905,66,1.063,67,1.063,68,0.905,69,1.382,70,0.835,71,0.835,72,1.063,73,0.835,74,1.063,75,0.021,76,0.021,85,3.258,115,3.258,140,3.258,164,1.248,173,2.166,174,2.166,177,3.686,182,2.953,187,1.606,191,1.606,192,1.935,214,2.61,314,2.371,400,3.258,486,2.898,528,2.416,581,3.258,582,2.773,583,4.472,584,4.472,585,4.472,586,2.972,587,3.316,588,3.316,589,4.472,590,5.416,591,4.472]],["title/components/TasksComponent.html",[0,0.298,65,0.882]],["body/components/TasksComponent.html",[0,0.402,1,0.689,2,1.092,3,0.265,4,0.233,5,0.809,6,0.809,7,0.809,8,0.233,10,0.689,11,1.835,12,1.81,14,1.183,16,0.689,17,0.689,18,1.282,20,1.508,22,0.172,23,0.387,25,0.652,26,0.032,27,1.008,28,0.982,29,0.893,31,0.973,33,0.718,34,0.371,38,0.233,39,0.707,40,0.809,41,1.183,42,1.183,43,0.537,44,1.539,45,0.809,46,1.022,47,0.809,48,0.809,49,0.689,50,0.809,51,0.689,52,0.809,53,1.008,54,0.991,55,1.512,56,0.809,57,0.689,58,0.809,59,1.311,60,0.809,61,0.689,62,0.809,63,1.311,64,0.809,65,1.311,66,0.809,67,0.809,68,1.311,69,0.689,70,0.635,71,0.635,72,0.809,73,1.474,74,0.809,75,0.018,76,0.018,81,1.6,83,0.929,89,1.022,90,0.809,103,1.092,105,1.031,118,2.154,127,1.473,134,1.031,135,0.95,136,1.505,154,1.635,164,0.95,181,3.114,182,2.546,185,2.391,188,0.809,191,1.222,195,1.473,219,2.688,225,2.391,226,2.546,227,2.391,228,2.391,229,2.391,230,2.827,231,2.391,232,3.887,233,2.688,235,1.838,239,1.635,240,1.838,241,1.635,242,1.838,243,1.635,244,1.838,245,1.838,246,1.031,260,2.827,306,1.473,307,1.222,311,1.338,315,1.635,317,2.154,318,2.827,331,1.635,336,3.111,370,1.635,416,1.838,471,1.838,475,2.11,536,3.649,552,3.649,553,3.086,558,2.11,563,2.11,565,2.11,566,2.11,569,3.178,581,1.838,586,2.474,592,2.11,593,3.69,594,3.69,595,3.69,596,4.8,597,3.69,598,2.523,599,2.523,600,2.523,601,2.523,602,2.523,603,3.69,604,2.523,605,2.523,606,1.838,607,1.473,608,1.635,609,4.363,610,2.523,611,2.523,612,2.523,613,2.523,614,3.69,615,2.523]],["title/injectables/TasksEffects.html",[77,1.122,616,2.354]],["body/injectables/TasksEffects.html",[3,0.264,4,0.232,8,0.232,22,0.171,23,0.387,25,0.436,26,0.032,28,1.006,29,0.915,31,0.915,33,0.604,34,0.37,38,0.232,39,0.408,54,0.777,75,0.017,76,0.017,77,1.279,79,1.334,81,1.456,158,2.835,188,0.807,191,1.219,380,4.323,468,2.823,484,3.107,488,3.107,537,2.543,541,2.543,545,3.659,568,3.107,586,1.784,607,2.543,608,2.823,616,2.683,617,2.105,618,5.331,619,4.357,620,3.454,621,3.684,622,2.517,623,6.06,624,6.002,625,3.684,626,4.963,627,3.684,628,3.684,629,4.01,630,4.896,631,3.684,632,5.854,633,2.517,634,3.684,635,3.684,636,4.795,637,3.684,638,2.517,639,3.684,640,3.684,641,4.795,642,3.684,643,2.517,644,3.684,645,3.684,646,3.684,647,3.684,648,3.684,649,2.517,650,4.357,651,4.795,652,3.684,653,2.517,654,3.684,655,2.517,656,3.684,657,3.684,658,3.684,659,3.684,660,2.517,661,2.105,662,2.517,663,2.517,664,2.517,665,2.105]],["title/injectables/TasksService.html",[77,1.122,620,2.094]],["body/injectables/TasksService.html",[3,0.245,4,0.384,8,0.215,13,1.362,22,0.159,23,0.366,25,0.654,26,0.032,27,1.723,28,0.743,29,0.676,31,0.932,33,0.654,34,0.343,38,0.215,39,0.378,46,1.104,54,0.978,75,0.017,76,0.017,77,1.21,78,2.698,79,1.237,81,1.66,83,0.877,89,1.144,90,0.748,100,1.513,101,3.574,103,1.672,105,0.954,134,2.257,135,1.953,136,0.637,158,1.13,164,0.879,182,3.636,188,0.748,191,1.13,299,1.362,305,1.362,306,1.362,307,1.13,309,1.513,310,1.362,312,1.7,313,1.7,484,2.258,488,2.995,537,2.034,541,2.034,543,2.914,545,2.258,568,2.995,569,3.779,586,2.019,607,2.034,620,2.258,626,1.952,630,1.952,665,1.952,666,1.952,667,3.367,668,2.698,669,4.168,670,4.622,671,4.168,672,4.168,673,2.334,674,2.334,675,3.484,676,2.334,677,2.334,678,2.334,679,3.484,680,2.334,681,2.334,682,4.168,683,4.168,684,2.334,685,3.484,686,2.334,687,3.484,688,2.334,689,3.484,690,1.952,691,2.914,692,2.334,693,3.484,694,2.334,695,2.914,696,2.334,697,2.334,698,3.484,699,4.168,700,2.334,701,4.168,702,2.334,703,2.334,704,2.334,705,2.334,706,2.334,707,4.168,708,1.952,709,1.952,710,2.334,711,4.946,712,3.484,713,3.484,714,3.484,715,2.334,716,2.334,717,2.334,718,3.484,719,2.334,720,2.334,721,2.334,722,2.334,723,4.168,724,2.334,725,3.484,726,2.334,727,4.622,728,2.334,729,2.334,730,2.334,731,4.622,732,4.168,733,4.168,734,4.168,735,3.484,736,3.484,737,1.952,738,2.334,739,2.334,740,2.334,741,2.334,742,2.334,743,2.334,744,2.334,745,2.538,746,1.952,747,2.334,748,2.334,749,2.334,750,2.334,751,2.334,752,2.334]],["title/interfaces/TasksState.html",[162,1.32,753,2.094]],["body/interfaces/TasksState.html",[3,0.454,4,0.399,8,0.399,22,0.294,23,0.557,25,0.68,26,0.032,33,0.68,38,0.489,54,0.971,75,0.025,76,0.025,103,1.281,116,1.922,117,1.922,142,2.294,162,1.768,163,3.417,164,1.998,166,2.804,167,2.804,168,3.098,294,3.762,298,3.44,307,2.095,586,2.976,753,3.721,754,3.152,755,4.327,756,3.152,757,3.618]],["title/components/ThemeComponent.html",[0,0.298,16,0.882]],["body/components/ThemeComponent.html",[0,0.458,1,0.874,2,1.293,3,0.336,4,0.295,5,1.4,6,1.027,7,1.027,8,0.295,10,0.874,11,1.896,12,1.879,14,1.4,16,1.458,17,0.874,22,0.363,23,0.459,25,0.517,26,0.032,31,0.806,33,0.588,34,0.47,38,0.295,39,0.519,40,1.027,41,1.4,42,1.4,43,0.681,44,1.712,45,1.027,46,1.136,47,1.027,48,1.027,49,0.874,50,1.027,51,0.874,52,1.027,53,0.874,54,0.906,55,0.948,56,1.027,57,0.874,58,1.027,59,0.874,60,1.027,61,0.874,62,1.027,63,0.874,64,1.027,65,0.874,66,1.027,67,1.027,68,0.874,69,0.874,70,0.806,71,0.806,72,1.027,73,0.806,74,1.027,75,0.021,76,0.021,83,1.099,89,0.681,122,2.075,134,1.308,135,1.206,136,1.193,171,3.621,173,2.115,174,2.115,187,1.551,211,3.621,212,4.157,213,3.621,215,4.157,216,3.621,221,4.157,246,1.308,758,2.678,759,5.024,760,4.97,761,5.766,762,4.97,763,4.97,764,4.97,765,4.157,766,4.368,767,3.947,768,4.465,769,3.202,770,3.202,771,3.202,772,3.202,773,3.202,774,3.202,775,3.202]],["title/injectables/ThemeService.html",[77,1.122,767,2.094]],["body/injectables/ThemeService.html",[3,0.345,4,0.303,8,0.303,13,1.92,22,0.224,23,0.467,25,0.688,26,0.032,27,1.215,28,0.792,29,0.721,31,1.004,33,0.389,34,0.483,38,0.303,39,0.533,46,1.072,75,0.021,76,0.021,77,1.545,79,1.744,81,1.768,83,1.119,89,1.2,90,1.055,100,2.131,101,2.596,103,0.974,121,3.72,122,3.265,134,2.059,135,1.897,136,1.651,297,3.719,299,1.92,759,3.72,765,3.72,767,2.882,768,4.515,776,2.751,777,5.813,778,5.039,779,6.193,780,5.039,781,4.448,782,5.398,783,4.448,784,4.448,785,5.039,786,4.448,787,4.448,788,3.289,789,3.289,790,4.448,791,3.289,792,4.448,793,3.289,794,3.289,795,3.289,796,3.289,797,3.289,798,3.289,799,5.64,800,3.289,801,5.039,802,4.448,803,3.289,804,3.289,805,3.289,806,3.289,807,4.448,808,3.289,809,3.289]],["title/pipes/ToDatePipe.html",[533,2.094,810,2.094]],["body/pipes/ToDatePipe.html",[3,0.446,4,0.391,8,0.391,10,1.16,25,0.503,26,0.032,29,0.964,31,0.688,33,0.621,34,0.624,38,0.391,39,0.688,46,1.212,75,0.025,76,0.025,83,1.069,89,0.904,90,1.996,101,3.324,134,1.735,135,1.599,301,3.4,311,3.301,312,4.453,313,3.093,317,2.478,533,3.4,577,4.388,810,3.4,811,4.246,812,4.388,813,3.551,814,5.247,815,4.246,816,5.247,817,4.246,818,5.247,819,4.246,820,4.246]],["title/injectables/ToasterService.html",[77,1.122,668,1.886]],["body/injectables/ToasterService.html",[3,0.373,4,0.328,8,0.328,13,2.076,22,0.242,23,0.492,25,0.685,26,0.032,27,1.765,28,0.835,29,0.76,31,0.964,33,0.555,34,0.522,38,0.328,39,0.577,46,1.185,75,0.022,76,0.022,77,1.628,79,1.885,81,1.699,83,1.179,89,1.185,100,2.305,134,2.276,135,2.097,136,1.521,158,1.722,188,1.14,210,3.919,527,3.919,668,2.735,821,2.974,822,5.24,823,5.24,824,4.686,825,4.686,826,4.686,827,4.686,828,4.686,829,5.57,830,3.556,831,6.06,832,4.686,833,3.556,834,4.686,835,3.556,836,4.686,837,3.556,838,4.686,839,3.556,840,5.24,841,4.686,842,4.686,843,4.686,844,4.686,845,3.556,846,3.556,847,3.556,848,3.556,849,5.24,850,2.974,851,3.556,852,3.556,853,3.556,854,3.556]],["title/components/UserComponent.html",[0,0.298,68,0.882]],["body/components/UserComponent.html",[0,0.445,1,0.828,2,1.245,3,0.318,4,0.28,5,0.972,6,0.972,7,0.972,8,0.28,10,0.828,11,1.883,12,1.864,14,1.349,16,0.828,17,0.828,18,1.461,20,1.719,22,0.206,23,0.442,25,0.359,26,0.032,28,0.86,29,0.783,31,0.919,33,0.702,34,0.445,35,1.608,38,0.28,39,0.492,40,0.972,41,1.349,42,1.349,43,0.645,44,1.673,45,0.972,46,1.028,47,0.972,48,0.972,49,0.828,50,0.972,51,0.828,52,0.972,53,0.828,54,0.888,55,0.897,56,0.972,57,0.828,58,0.972,59,0.828,60,0.972,61,0.828,62,0.972,63,0.828,64,0.972,65,0.828,66,0.972,67,0.972,68,1.425,69,1.549,70,0.763,71,0.763,72,0.972,73,0.763,74,0.972,75,0.02,76,0.02,78,3.045,81,1.644,83,1.059,87,4.743,89,0.895,90,1.349,99,2.209,136,1.319,173,2.037,174,2.037,187,1.469,188,0.972,224,3.801,237,3.065,246,1.239,260,3.13,317,2.455,318,3.13,336,3.381,556,2.536,668,3.045,691,3.518,695,3.518,708,2.536,709,2.536,745,3.519,746,2.536,855,2.536,856,4.83,857,4.83,858,4.83,859,4.83,860,4.207,861,4.207,862,3.032,863,3.032,864,3.032,865,3.032,866,3.032,867,3.032,868,3.032,869,3.032,870,3.032,871,3.032,872,3.032,873,3.032,874,3.032,875,4.207]],["title/coverage.html",[876,3.675]],["body/coverage.html",[0,0.542,1,0.623,8,0.21,9,1.909,16,0.623,17,0.623,25,0.27,26,0.032,43,0.729,49,0.623,51,0.623,53,0.623,54,0.37,55,1.014,57,0.623,59,0.623,61,0.623,63,0.623,65,0.623,68,0.623,71,0.574,73,0.574,75,0.016,76,0.016,77,1.701,78,1.332,80,1.909,105,0.933,109,1.909,143,1.663,144,1.663,145,1.663,162,1.868,163,1.21,165,1.909,172,1.909,193,1.663,214,3.908,218,1.909,255,1.909,256,1.909,257,1.909,278,1.909,294,1.332,295,3.569,296,3.569,298,1.479,300,1.663,302,1.663,303,1.663,304,1.909,314,2.597,315,1.479,316,1.909,346,1.479,354,1.663,357,1.663,403,1.663,404,1.909,416,1.663,417,1.909,434,1.663,468,1.479,469,1.663,470,1.663,472,1.663,473,1.663,474,1.663,528,1.663,529,1.909,533,1.479,537,1.332,540,1.663,541,1.332,581,1.663,582,1.909,592,1.909,606,1.663,607,1.332,608,1.479,616,1.663,617,1.909,620,1.479,666,1.909,667,1.663,668,1.332,690,2.865,753,1.479,754,2.496,756,1.663,758,1.909,767,1.479,776,1.909,810,1.479,812,1.909,813,1.909,821,1.909,855,1.909,876,1.909,877,2.282,878,2.282,879,2.282,880,3.426,881,1.909,882,6.615,883,1.909,884,6.628,885,2.282,886,1.909,887,1.909,888,1.909,889,1.909,890,1.909,891,2.282,892,3.823,893,1.909,894,1.909,895,1.909,896,3.426,897,4.113,898,4.899,899,4.113,900,2.282,901,3.44,902,2.282,903,2.282,904,5.193,905,1.909,906,1.909,907,1.909,908,1.909,909,1.909,910,1.909,911,1.909,912,1.909,913,1.909,914,1.909,915,1.909,916,1.909,917,4.695,918,1.909,919,1.909,920,1.909,921,1.909,922,3.823,923,1.909,924,1.909,925,1.909,926,1.909,927,3.426,928,2.282,929,1.909,930,1.909,931,1.909,932,1.909,933,1.909,934,1.909,935,1.909,936,1.909,937,2.996,938,1.909,939,1.909,940,2.282,941,2.282]],["title/dependencies.html",[942,2.263,943,3.246]],["body/dependencies.html",[26,0.032,34,0.665,35,2.4,75,0.026,76,0.026,191,2.192,192,2.642,195,3.185,287,4.563,288,3.975,372,3.298,661,3.786,943,3.786,944,4.526,945,5.505,946,4.526,947,5.456,948,4.526,949,4.526,950,4.526,951,4.526,952,4.526,953,3.786,954,4.526,955,4.526,956,4.526,957,4.526,958,4.526,959,4.526]],["title/miscellaneous/enumerations.html",[960,1.434,961,3.246]],["body/miscellaneous/enumerations.html",[22,0.3,26,0.031,29,1.064,30,3.22,75,0.026,76,0.026,116,2.389,117,2.389,168,3.139,220,4.497,226,3.139,258,3.696,499,4.497,523,2.864,586,2.604,960,2.343,961,3.696,962,4.42,963,5.378,964,4.42,965,4.42,966,5.378,967,4.42,968,4.42,969,4.42,970,4.42,971,4.42,972,4.42,973,3.696,974,4.42,975,4.42,976,4.42,977,4.497,978,4.497,979,4.42,980,4.42,981,4.42,982,5.378]],["title/miscellaneous/functions.html",[960,1.434,983,3.246]],["body/miscellaneous/functions.html",[22,0.333,26,0.031,75,0.027,76,0.027,89,1.216,90,1.832,354,4.409,357,4.409,931,4.092,932,4.778,933,4.092,960,2.594,983,4.092,984,4.892,985,4.892,986,5.713]],["title/index.html",[22,0.184,987,2.706,988,2.706]],["body/index.html",[4,0.356,26,0.029,28,0.688,38,0.356,75,0.023,76,0.023,103,1.143,181,2.255,196,3.602,288,2.815,299,2.255,414,3.231,937,2.815,945,3.231,953,4.561,989,3.864,990,6.079,991,3.864,992,3.864,993,3.864,994,3.864,995,3.231,996,5.453,997,5.453,998,3.864,999,3.864,1000,4.945,1001,4.945,1002,4.945,1003,3.864,1004,3.864,1005,3.864,1006,3.864,1007,3.864,1008,3.864,1009,3.864,1010,3.864,1011,3.864,1012,3.864,1013,3.864,1014,3.864,1015,3.864,1016,5.942,1017,5.749,1018,3.864,1019,5.453,1020,3.864,1021,3.864,1022,3.864,1023,3.864,1024,4.945,1025,3.864,1026,3.864,1027,3.864,1028,3.864,1029,3.864,1030,4.561,1031,3.231,1032,3.231,1033,3.231,1034,3.231,1035,3.231,1036,3.231,1037,3.231,1038,3.231,1039,3.231,1040,3.231,1041,3.231,1042,3.231,1043,3.231,1044,4.945,1045,5.453,1046,3.864,1047,5.942,1048,3.864,1049,3.864,1050,3.864,1051,3.864,1052,3.864,1053,3.864,1054,3.864,1055,3.864,1056,3.864,1057,3.864,1058,3.864,1059,5.749,1060,3.864,1061,3.864,1062,3.864,1063,3.864,1064,3.864,1065,3.864,1066,3.864,1067,3.864,1068,3.864,1069,4.945,1070,3.864,1071,3.864]],["title/modules.html",[1072,3.675]],["body/modules.html",[26,0.028,75,0.028,76,0.028,1072,4.339]],["title/overview.html",[1073,3.675]],["body/overview.html",[2,1.498,26,0.028,70,1.274,75,0.028,76,0.028,79,2.683,164,1.905,523,3.279,810,3.279,973,4.232,1073,4.232,1074,5.061,1075,5.061,1076,5.061]],["title/properties.html",[23,0.408,942,2.263]],["body/properties.html",[23,0.541,26,0.029,75,0.028,76,0.028,995,4.307,1077,5.149]],["title/miscellaneous/variables.html",[960,1.434,1078,3.246]],["body/miscellaneous/variables.html",[12,0.783,22,0.081,25,0.594,26,0.032,27,0.722,28,1.122,29,1.022,30,0.864,54,0.96,69,0.722,75,0.01,76,0.01,82,1.474,90,1.125,94,1.474,101,3.127,103,1.485,104,0.864,105,1.433,116,1.991,117,1.908,143,1.474,144,1.474,145,1.474,147,0.992,154,2.273,158,2.249,163,2.162,166,2.273,167,2.273,168,2.229,170,1.692,175,2.277,182,0.692,193,1.474,214,1.824,224,1.474,237,1.474,294,3.234,295,0.864,296,2.555,298,1.714,299,2.047,300,2.97,301,2.025,302,2.97,303,1.474,305,1.181,307,0.575,310,1.181,346,1.311,364,0.992,366,0.992,382,0.864,405,1.927,432,2.212,434,1.474,444,2.277,454,2.212,468,1.311,469,1.474,470,1.474,472,1.474,473,1.474,474,1.474,484,0.769,486,1.714,488,1.311,494,1.692,496,0.992,501,0.992,523,1.714,537,1.181,540,1.474,541,1.181,545,2.025,568,1.311,574,0.992,586,2.999,606,2.555,607,1.181,608,1.311,629,0.992,667,1.927,737,3.194,745,0.864,753,0.769,754,0.864,756,1.927,757,0.992,850,2.933,881,0.992,883,1.692,886,0.992,887,1.692,888,0.992,889,1.692,890,1.692,892,0.992,893,2.212,894,2.933,895,2.212,901,0.992,904,0.992,905,1.692,906,1.692,907,1.692,908,1.692,909,1.692,910,1.692,911,1.692,912,1.692,913,1.692,914,1.692,915,0.992,916,2.212,917,0.992,918,1.692,919,2.212,920,2.212,921,3.194,922,0.992,923,1.692,924,1.692,925,1.692,926,2.212,929,0.992,930,1.692,934,0.992,935,2.212,936,0.992,937,2.782,938,0.992,939,0.992,960,0.629,977,1.692,978,0.992,1030,2.212,1031,2.212,1032,2.212,1033,1.692,1034,2.212,1035,1.692,1036,2.212,1037,1.692,1038,2.212,1039,1.692,1040,2.212,1041,1.692,1042,2.212,1043,1.692,1078,0.992,1079,1.186,1080,3.125,1081,1.186,1082,1.186,1083,5.484,1084,2.645,1085,1.186,1086,1.186,1087,1.186,1088,3.125,1089,3.125,1090,1.186,1091,1.186,1092,1.186,1093,4.482,1094,1.186,1095,1.186,1096,1.186,1097,1.186,1098,1.186,1099,1.186,1100,1.186,1101,1.186,1102,2.645,1103,2.645,1104,1.186,1105,2.023,1106,2.023,1107,1.186,1108,2.023,1109,1.186,1110,1.186,1111,1.186,1112,1.186,1113,1.186,1114,1.186,1115,1.186,1116,1.186,1117,1.186,1118,1.186,1119,1.186,1120,2.023,1121,2.023,1122,3.125,1123,2.023,1124,1.186,1125,1.186,1126,2.023,1127,5.285,1128,2.645,1129,5.357,1130,3.508,1131,2.645,1132,2.645,1133,2.645,1134,1.186,1135,1.186,1136,1.186,1137,2.023,1138,1.186,1139,1.186,1140,1.186,1141,1.186,1142,1.186,1143,1.186,1144,1.186,1145,1.186,1146,1.186,1147,1.186,1148,1.186,1149,1.186,1150,1.186,1151,1.186,1152,1.186,1153,1.186,1154,3.508,1155,1.186,1156,1.186,1157,1.186,1158,1.186,1159,1.186,1160,1.186,1161,2.645,1162,1.186,1163,2.645,1164,1.186,1165,1.186,1166,1.186,1167,1.186,1168,1.186,1169,1.186,1170,1.186,1171,1.186,1172,1.186,1173,1.186,1174,1.186,1175,1.186,1176,1.186,1177,1.186,1178,1.186,1179,4.295,1180,2.023,1181,1.186,1182,2.023,1183,1.186,1184,1.186,1185,6.163,1186,1.186,1187,4.077,1188,1.186,1189,1.186,1190,1.186,1191,1.186,1192,1.186,1193,1.186,1194,1.186,1195,1.186,1196,2.023,1197,1.186,1198,2.023,1199,1.186,1200,1.186,1201,1.186,1202,1.186,1203,1.186,1204,3.508,1205,1.186,1206,1.186,1207,1.186,1208,1.186,1209,1.186,1210,3.125,1211,1.186,1212,1.186,1213,1.186,1214,1.186,1215,1.186,1216,1.186,1217,1.186,1218,1.186,1219,1.186,1220,1.186,1221,1.186,1222,1.186,1223,1.186]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":214,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskListComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.0",{"_index":1077,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":891,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":898,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":523,"title":{},"body":{"components/TaskFilterComponent.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["10",{"_index":762,"title":{},"body":{"components/ThemeComponent.html":{}}}],["100",{"_index":510,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["100vh",{"_index":203,"title":{},"body":{"components/LoadingComponent.html":{}}}],["100vw",{"_index":201,"title":{},"body":{"components/LoadingComponent.html":{}}}],["11.1.0",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1074,"title":{},"body":{"overview.html":{}}}],["144738632001",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["150px",{"_index":513,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["15px",{"_index":761,"title":{},"body":{"components/ThemeComponent.html":{}}}],["19.0.0",{"_index":945,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["19.0.4",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["1:144738632001:web:165d873992cf9a771fa1c0",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1rem",{"_index":525,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["2",{"_index":973,"title":{},"body":{"miscellaneous/enumerations.html":{},"overview.html":{}}}],["2.3.0",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":391,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["200px",{"_index":520,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["25",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":975,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3000",{"_index":842,"title":{},"body":{"injectables/ToasterService.html":{}}}],["4",{"_index":1076,"title":{},"body":{"overview.html":{}}}],["404",{"_index":266,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["4caf50",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1075,"title":{},"body":{"overview.html":{}}}],["7.8.0",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":512,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["99",{"_index":217,"title":{},"body":{"components/LoadingComponent.html":{}}}],["_showmessage",{"_index":824,"title":{},"body":{"injectables/ToasterService.html":{}}}],["_showmessage(message",{"_index":828,"title":{},"body":{"injectables/ToasterService.html":{}}}],["_snackbar",{"_index":822,"title":{},"body":{"injectables/ToasterService.html":{}}}],["a[sortby",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abstract",{"_index":289,"title":{},"body":{"directives/PageComponent.html":{}}}],["accessors",{"_index":121,"title":{},"body":{"directives/ColorDirective.html":{},"injectables/ThemeService.html":{}}}],["actions",{"_index":618,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["activatedroute",{"_index":286,"title":{},"body":{"directives/PageComponent.html":{}}}],["actual_component",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["add",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["adddoc",{"_index":706,"title":{},"body":{"injectables/TasksService.html":{}}}],["addtask",{"_index":595,"title":{},"body":{"components/TasksComponent.html":{}}}],["addtask(task",{"_index":597,"title":{},"body":{"components/TasksComponent.html":{}}}],["aizasyalgopfi46ux1p_vryfbgvkfdseawvy174",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular",{"_index":993,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":192,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":372,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["angular/material/button",{"_index":246,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["angular/material/card",{"_index":556,"title":{},"body":{"components/TaskItemComponent.html":{},"components/UserComponent.html":{}}}],["angular/material/checkbox",{"_index":465,"title":{},"body":{"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{}}}],["angular/material/datepicker",{"_index":376,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["angular/material/dialog",{"_index":370,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["angular/material/divider",{"_index":868,"title":{},"body":{"components/UserComponent.html":{}}}],["angular/material/form",{"_index":373,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["angular/material/icon",{"_index":264,"title":{},"body":{"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{}}}],["angular/material/input",{"_index":375,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["angular/material/menu",{"_index":476,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["angular/material/progress",{"_index":189,"title":{},"body":{"components/LoadingComponent.html":{}}}],["angular/material/select",{"_index":377,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["angular/material/snack",{"_index":847,"title":{},"body":{"injectables/ToasterService.html":{}}}],["angular/platform",{"_index":287,"title":{},"body":{"directives/PageComponent.html":{},"dependencies.html":{}}}],["angular/router",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/UserComponent.html":{},"dependencies.html":{}}}],["apikey",{"_index":1032,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":1105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.component.html",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":21,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":883,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appfirebaseconfig",{"_index":893,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appid",{"_index":1034,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":1019,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applytheme",{"_index":781,"title":{},"body":{"injectables/ThemeService.html":{}}}],["applytheme(isdarkmode",{"_index":787,"title":{},"body":{"injectables/ThemeService.html":{}}}],["appstore",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["arealltasksselected",{"_index":427,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["aresometasksselected",{"_index":428,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["artifacts",{"_index":1063,"title":{},"body":{"index.html":{}}}],["asc",{"_index":977,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"components/LoadingComponent.html":{},"components/TaskListComponent.html":{}}}],["async)?.length",{"_index":497,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["asyncpipe",{"_index":177,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskListComponent.html":{}}}],["auth",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["auth.guard.ts",{"_index":889,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authdomain",{"_index":1036,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["authenticated",{"_index":748,"title":{},"body":{"injectables/TasksService.html":{}}}],["authentication",{"_index":1021,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":887,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":78,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["authstate",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authstate$.pipe",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":1053,"title":{},"body":{"index.html":{}}}],["avalue",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["b",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b[sortby",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backdrop",{"_index":206,"title":{},"body":{"components/LoadingComponent.html":{}}}],["background",{"_index":204,"title":{},"body":{"components/LoadingComponent.html":{}}}],["backgroundcolor",{"_index":111,"title":{},"body":{"directives/ColorDirective.html":{}}}],["bar",{"_index":848,"title":{},"body":{"injectables/ToasterService.html":{}}}],["before",{"_index":1023,"title":{},"body":{"index.html":{}}}],["better",{"_index":1008,"title":{},"body":{"index.html":{}}}],["block",{"_index":509,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["blur",{"_index":359,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["boolean",{"_index":297,"title":{},"body":{"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"injectables/ThemeService.html":{}}}],["bottom",{"_index":527,"title":{},"body":{"components/TaskFilterComponent.html":{},"injectables/ToasterService.html":{}}}],["browser",{"_index":288,"title":{},"body":{"directives/PageComponent.html":{},"dependencies.html":{},"index.html":{}}}],["build",{"_index":1059,"title":{},"body":{"index.html":{}}}],["build:prodthis",{"_index":1061,"title":{},"body":{"index.html":{}}}],["buildfor",{"_index":1060,"title":{},"body":{"index.html":{}}}],["building",{"_index":1058,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bulkupdate",{"_index":669,"title":{},"body":{"injectables/TasksService.html":{}}}],["bulkupdate(taskids",{"_index":673,"title":{},"body":{"injectables/TasksService.html":{}}}],["bulkupdatetasks",{"_index":468,"title":{},"body":{"components/TaskFilterComponent.html":{},"injectables/TasksEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bulkupdatetasksfailure",{"_index":905,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["bulkupdatetaskssuccess",{"_index":906,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["button",{"_index":760,"title":{},"body":{"components/ThemeComponent.html":{}}}],["bvalue",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivatefn",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch((error",{"_index":252,"title":{},"body":{"components/LoginComponent.html":{}}}],["catcherror",{"_index":665,"title":{},"body":{"injectables/TasksEffects.html":{},"injectables/TasksService.html":{}}}],["catcherror((error",{"_index":630,"title":{},"body":{"injectables/TasksEffects.html":{},"injectables/TasksService.html":{}}}],["cd",{"_index":1005,"title":{},"body":{"index.html":{}}}],["center",{"_index":210,"title":{},"body":{"components/LoadingComponent.html":{},"injectables/ToasterService.html":{}}}],["changedetection",{"_index":173,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["changedetectionstrategy",{"_index":187,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":174,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["changing",{"_index":1010,"title":{},"body":{"index.html":{}}}],["characters",{"_index":392,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["checkbox",{"_index":517,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["checkmark",{"_index":305,"title":{},"body":{"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{}}}],["classname",{"_index":225,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["clear",{"_index":501,"title":{},"body":{"components/TaskFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["clearfilters",{"_index":434,"title":{},"body":{"components/TaskFilterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cli",{"_index":994,"title":{},"body":{"index.html":{}}}],["close",{"_index":402,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{}}}],["cloudfirestore",{"_index":1022,"title":{},"body":{"index.html":{}}}],["collection",{"_index":701,"title":{},"body":{"injectables/TasksService.html":{}}}],["collectionreference",{"_index":707,"title":{},"body":{"injectables/TasksService.html":{}}}],["color",{"_index":120,"title":{},"body":{"directives/ColorDirective.html":{},"components/LoadingComponent.html":{}}}],["colordirective",{"_index":71,"title":{"directives/ColorDirective.html":{}},"body":{"components/AppComponent.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["colors",{"_index":198,"title":{},"body":{"components/LoadingComponent.html":{}}}],["colors.$overlay",{"_index":205,"title":{},"body":{"components/LoadingComponent.html":{}}}],["colorsignal",{"_index":112,"title":{},"body":{"directives/ColorDirective.html":{}}}],["compact",{"_index":516,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["compile",{"_index":1062,"title":{},"body":{"index.html":{}}}],["completion",{"_index":580,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["completiondate",{"_index":306,"title":{},"body":{"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"overview.html":{}}}],["components/task",{"_index":609,"title":{},"body":{"components/TasksComponent.html":{}}}],["components/user/user.component",{"_index":605,"title":{},"body":{"components/TasksComponent.html":{}}}],["confirm",{"_index":500,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["confirmdelete",{"_index":408,"title":{},"body":{"components/TaskDeleteComponent.html":{}}}],["console.error('login",{"_index":253,"title":{},"body":{"components/LoginComponent.html":{}}}],["const",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"components/LoginComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"injectables/ThemeService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constants/colors",{"_index":146,"title":{},"body":{"directives/ColorDirective.html":{}}}],["constructor",{"_index":122,"title":{},"body":{"directives/ColorDirective.html":{},"directives/PageComponent.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{}}}],["constructor(public",{"_index":774,"title":{},"body":{"components/ThemeComponent.html":{}}}],["constructor(themeservice",{"_index":769,"title":{},"body":{"components/ThemeComponent.html":{}}}],["container",{"_index":505,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["core/base/page",{"_index":245,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TasksComponent.html":{}}}],["core/enums/page",{"_index":284,"title":{},"body":{"directives/PageComponent.html":{}}}],["core/services/auth.service",{"_index":708,"title":{},"body":{"injectables/TasksService.html":{},"components/UserComponent.html":{}}}],["couldn't",{"_index":267,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["couldn\\'t",{"_index":275,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["coverage",{"_index":876,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":1132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createaction",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createaction('[tasks",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["created",{"_index":729,"title":{},"body":{"injectables/TasksService.html":{}}}],["createeffect",{"_index":623,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["createfeatureselector('tasks",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createreducer",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":607,"title":{},"body":{"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createtask(task",{"_index":675,"title":{},"body":{"injectables/TasksService.html":{}}}],["createtaskfailure",{"_index":907,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createtasksuccess",{"_index":908,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["creation",{"_index":730,"title":{},"body":{"injectables/TasksService.html":{}}}],["creationdate",{"_index":307,"title":{},"body":{"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"miscellaneous/variables.html":{}}}],["currenttheme",{"_index":785,"title":{},"body":{"injectables/ThemeService.html":{}}}],["currentuser",{"_index":745,"title":{},"body":{"injectables/TasksService.html":{},"components/UserComponent.html":{},"miscellaneous/variables.html":{}}}],["currentuser.uid",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentuser?.email",{"_index":875,"title":{},"body":{"components/UserComponent.html":{}}}],["dark",{"_index":765,"title":{},"body":{"components/ThemeComponent.html":{},"injectables/ThemeService.html":{}}}],["dark_theme_class",{"_index":778,"title":{},"body":{"injectables/ThemeService.html":{}}}],["data",{"_index":330,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{}}}],["data.id",{"_index":415,"title":{},"body":{"components/TaskDeleteComponent.html":{}}}],["date",{"_index":311,"title":{},"body":{"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"pipes/ToDatePipe.html":{}}}],["date.pipe",{"_index":561,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["date.pipe.ts",{"_index":813,"title":{},"body":{"pipes/ToDatePipe.html":{},"coverage.html":{}}}],["date.pipe.ts:6",{"_index":817,"title":{},"body":{"pipes/ToDatePipe.html":{}}}],["date.validator.ts",{"_index":932,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["datepipe",{"_index":532,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["dd/mm/yyyy",{"_index":578,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["decorators",{"_index":127,"title":{},"body":{"directives/ColorDirective.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["default",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_color",{"_index":143,"title":{},"body":{"directives/ColorDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultconfig",{"_index":823,"title":{},"body":{"injectables/ToasterService.html":{}}}],["defined",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{}}}],["delete",{"_index":405,"title":{},"body":{"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{},"miscellaneous/variables.html":{}}}],["delete'},{'name",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["delete.component",{"_index":559,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["delete.component.html",{"_index":406,"title":{},"body":{"components/TaskDeleteComponent.html":{}}}],["delete.component.scss",{"_index":407,"title":{},"body":{"components/TaskDeleteComponent.html":{}}}],["delete.component.ts",{"_index":404,"title":{},"body":{"components/TaskDeleteComponent.html":{},"coverage.html":{}}}],["delete.component.ts:18",{"_index":410,"title":{},"body":{"components/TaskDeleteComponent.html":{}}}],["delete.component.ts:19",{"_index":411,"title":{},"body":{"components/TaskDeleteComponent.html":{}}}],["delete.component.ts:21",{"_index":409,"title":{},"body":{"components/TaskDeleteComponent.html":{}}}],["delete/task",{"_index":403,"title":{},"body":{"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{},"coverage.html":{}}}],["deleted",{"_index":739,"title":{},"body":{"injectables/TasksService.html":{}}}],["deletedoc",{"_index":705,"title":{},"body":{"injectables/TasksService.html":{}}}],["deletetask",{"_index":537,"title":{},"body":{"components/TaskItemComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deletetask(taskid",{"_index":543,"title":{},"body":{"components/TaskItemComponent.html":{},"injectables/TasksService.html":{}}}],["deletetaskfailure",{"_index":909,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["deletetasksuccess",{"_index":910,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["deleting",{"_index":740,"title":{},"body":{"injectables/TasksService.html":{}}}],["dependencies",{"_index":943,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deploy",{"_index":1069,"title":{},"body":{"index.html":{}}}],["deps",{"_index":1108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desc",{"_index":978,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":308,"title":{},"body":{"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{}}}],["detected",{"_index":395,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["development",{"_index":1044,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["dialog",{"_index":536,"title":{},"body":{"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["dialogref",{"_index":331,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["dialogref.afterclosed().subscribe((result",{"_index":565,"title":{},"body":{"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["different",{"_index":1012,"title":{},"body":{"index.html":{}}}],["direction",{"_index":494,"title":{},"body":{"components/TaskFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["direction.enum.ts",{"_index":966,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directive",{"_index":43,"title":{"directives/ColorDirective.html":{},"directives/PageComponent.html":{}},"body":{"components/AppComponent.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["directives",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"overview.html":{}}}],["directives/color.directive",{"_index":557,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["directory",{"_index":1065,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":361,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["display",{"_index":508,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["dist",{"_index":1064,"title":{},"body":{"index.html":{}}}],["doc",{"_index":703,"title":{},"body":{"injectables/TasksService.html":{}}}],["doc(this.firestore",{"_index":733,"title":{},"body":{"injectables/TasksService.html":{}}}],["docsnap.data",{"_index":719,"title":{},"body":{"injectables/TasksService.html":{}}}],["docsnap.id",{"_index":721,"title":{},"body":{"injectables/TasksService.html":{}}}],["document.body.classlist.add(this.dark_theme_class",{"_index":803,"title":{},"body":{"injectables/ThemeService.html":{}}}],["document.body.classlist.remove(this.dark_theme_class",{"_index":804,"title":{},"body":{"injectables/ThemeService.html":{}}}],["documentation",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["done",{"_index":499,"title":{},"body":{"components/TaskFilterComponent.html":{},"miscellaneous/enumerations.html":{}}}],["due",{"_index":396,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskItemComponent.html":{}}}],["duedate",{"_index":309,"title":{},"body":{"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"injectables/TasksService.html":{}}}],["duedatevalidator",{"_index":357,"title":{},"body":{"components/TaskAddEditComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["duration",{"_index":841,"title":{},"body":{"injectables/ToasterService.html":{}}}],["dynamic",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["edit",{"_index":319,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskItemComponent.html":{}}}],["edit'},{'name",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["edit.component",{"_index":558,"title":{},"body":{"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["edit.component.html",{"_index":328,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["edit.component.scss",{"_index":329,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["edit.component.ts",{"_index":316,"title":{},"body":{"components/TaskAddEditComponent.html":{},"coverage.html":{}}}],["edit.component.ts:41",{"_index":341,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["edit.component.ts:42",{"_index":343,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["edit.component.ts:43",{"_index":345,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["edit.component.ts:45",{"_index":349,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["edit.component.ts:46",{"_index":347,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["edit.component.ts:48",{"_index":367,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["edit.component.ts:71",{"_index":338,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["edit.component.ts:81",{"_index":339,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["edit/task",{"_index":315,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"coverage.html":{}}}],["effect",{"_index":138,"title":{},"body":{"directives/ColorDirective.html":{}}}],["element",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["enumerations",{"_index":961,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":142,"title":{},"body":{"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"interfaces/TasksState.html":{}}}],["environment",{"_index":937,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["environment.production",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.ts",{"_index":1029,"title":{},"body":{"index.html":{}}}],["error",{"_index":158,"title":{},"body":{"directives/ColorDirective.html":{},"components/LoginComponent.html":{},"interfaces/RequestStatus.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"injectables/ToasterService.html":{},"miscellaneous/variables.html":{}}}],["error('user",{"_index":747,"title":{},"body":{"injectables/TasksService.html":{}}}],["error.message",{"_index":632,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["errormessage",{"_index":683,"title":{},"body":{"injectables/TasksService.html":{}}}],["eventcoalescing",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":1016,"title":{},"body":{"index.html":{}}}],["exceed",{"_index":390,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["experience",{"_index":1009,"title":{},"body":{"index.html":{}}}],["export",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"index.html":{}}}],["extends",{"_index":219,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TasksComponent.html":{}}}],["f44336",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":731,"title":{},"body":{"injectables/TasksService.html":{}}}],["failure",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":299,"title":{},"body":{"interfaces/RequestStatus.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":1000,"title":{},"body":{"index.html":{}}}],["fb",{"_index":332,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["feature",{"_index":1006,"title":{},"body":{"index.html":{}}}],["ff9800",{"_index":1140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":374,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["fields",{"_index":1028,"title":{},"body":{"index.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["files",{"_index":1057,"title":{},"body":{"index.html":{}}}],["filter",{"_index":419,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter'},{'name",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["filter((key",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filter.component",{"_index":611,"title":{},"body":{"components/TasksComponent.html":{}}}],["filter.component.html",{"_index":426,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.scss",{"_index":425,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts",{"_index":417,"title":{},"body":{"components/TaskFilterComponent.html":{},"coverage.html":{}}}],["filter.component.ts:104",{"_index":440,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:47",{"_index":449,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:48",{"_index":464,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:50",{"_index":463,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:51",{"_index":457,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:52",{"_index":462,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:53",{"_index":460,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:55",{"_index":456,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:62",{"_index":451,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:66",{"_index":453,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:68",{"_index":446,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:69",{"_index":448,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:70",{"_index":459,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:72",{"_index":441,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:80",{"_index":443,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:84",{"_index":439,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter.component.ts:99",{"_index":438,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filter/task",{"_index":416,"title":{},"body":{"components/TaskFilterComponent.html":{},"components/TasksComponent.html":{},"coverage.html":{}}}],["filterbypriority",{"_index":923,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterbypriority(filteredtasks",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filterbysearchquery",{"_index":924,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterbysearchquery(filteredtasks",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filterbystatus",{"_index":925,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filterbystatus(filteredtasks",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filteredtasks",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filterform",{"_index":429,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["filters",{"_index":163,"title":{"interfaces/Filters.html":{}},"body":{"interfaces/Filters.html":{},"components/TaskFilterComponent.html":{},"interfaces/TasksState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filters.priority",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filters.searchquery",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filters.sortby",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filters.sortdirection",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filters.status",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filterssub",{"_index":430,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["find",{"_index":268,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["firebase",{"_index":953,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["firebase.config",{"_index":710,"title":{},"body":{"injectables/TasksService.html":{}}}],["firebase/auth",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/UserComponent.html":{}}}],["firebase/firestore",{"_index":313,"title":{},"body":{"interfaces/Task.html":{},"injectables/TasksService.html":{},"pipes/ToDatePipe.html":{}}}],["firebase_app",{"_index":894,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebase_auth",{"_index":895,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebaseapp",{"_index":1106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebaseconfig",{"_index":1031,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["firestore",{"_index":667,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fixed",{"_index":212,"title":{},"body":{"components/LoadingComponent.html":{},"components/ThemeComponent.html":{}}}],["flex",{"_index":522,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["fnm",{"_index":1003,"title":{},"body":{"index.html":{}}}],["for.go",{"_index":277,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["forkjoin",{"_index":697,"title":{},"body":{"injectables/TasksService.html":{}}}],["forkjoin(updatetasks",{"_index":743,"title":{},"body":{"injectables/TasksService.html":{}}}],["form",{"_index":504,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["formbuilder",{"_index":371,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["found",{"_index":258,"title":{},"body":{"components/NotFoundComponent.html":{},"miscellaneous/enumerations.html":{}}}],["found'},{'name",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["found.component.html",{"_index":262,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.scss",{"_index":263,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.ts",{"_index":257,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["found/not",{"_index":256,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["foundwe",{"_index":274,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["from(adddoc(taskscollection",{"_index":728,"title":{},"body":{"injectables/TasksService.html":{}}}],["from(deletedoc(taskdoc",{"_index":738,"title":{},"body":{"injectables/TasksService.html":{}}}],["from(getdocs(taskscollection)).pipe",{"_index":715,"title":{},"body":{"injectables/TasksService.html":{}}}],["from(updatedoc(taskdoc",{"_index":735,"title":{},"body":{"injectables/TasksService.html":{}}}],["function",{"_index":690,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["functions",{"_index":983,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":991,"title":{},"body":{"index.html":{}}}],["getauth",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["getauth(app",{"_index":1107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getcurrenttheme",{"_index":797,"title":{},"body":{"injectables/ThemeService.html":{}}}],["getcurrentuser",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["getdocs",{"_index":702,"title":{},"body":{"injectables/TasksService.html":{}}}],["getfirestore(app",{"_index":1109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gettasksforuser",{"_index":670,"title":{},"body":{"injectables/TasksService.html":{}}}],["getting",{"_index":987,"title":{"index.html":{}},"body":{}}],["go",{"_index":271,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["google",{"_index":254,"title":{},"body":{"components/LoginComponent.html":{}}}],["googleauthprovider",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["height",{"_index":202,"title":{},"body":{"components/LoadingComponent.html":{}}}],["high",{"_index":974,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["horizontalposition",{"_index":843,"title":{},"body":{"injectables/ToasterService.html":{}}}],["host",{"_index":502,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["hostbinding",{"_index":139,"title":{},"body":{"directives/ColorDirective.html":{},"directives/PageComponent.html":{}}}],["hostbinding('class",{"_index":239,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["hostbinding('style.background",{"_index":128,"title":{},"body":{"directives/ColorDirective.html":{}}}],["hostbindings",{"_index":118,"title":{},"body":{"directives/ColorDirective.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["hosting",{"_index":1071,"title":{},"body":{"index.html":{}}}],["html",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["http://localhost:4200",{"_index":1052,"title":{},"body":{"index.html":{}}}],["https://console.firebase.google.com",{"_index":1026,"title":{},"body":{"index.html":{}}}],["https://www.freecodecamp.org/news/fnm",{"_index":1007,"title":{},"body":{"index.html":{}}}],["id",{"_index":310,"title":{},"body":{"interfaces/Task.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":317,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"components/TasksComponent.html":{},"pipes/ToDatePipe.html":{},"components/UserComponent.html":{}}}],["import",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{}}}],["imports",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["in_progress",{"_index":980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["include",{"_index":207,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{}}}],["inherited",{"_index":232,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TasksComponent.html":{}}}],["initformstate",{"_index":431,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["initializeapp(environment.firebaseconfig",{"_index":1104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialrequeststatus",{"_index":298,"title":{},"body":{"interfaces/RequestStatus.html":{},"interfaces/TasksState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initialtasksstate",{"_index":756,"title":{},"body":{"interfaces/TasksState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initialtasksstate.filters",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":188,"title":{},"body":{"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{}}}],["inject(actions",{"_index":621,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["inject(activatedroute",{"_index":241,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["inject(authservice",{"_index":691,"title":{},"body":{"injectables/TasksService.html":{},"components/UserComponent.html":{}}}],["inject(firestore",{"_index":693,"title":{},"body":{"injectables/TasksService.html":{}}}],["inject(formbuilder",{"_index":344,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["inject(mat_dialog_data",{"_index":340,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{}}}],["inject(matdialog",{"_index":553,"title":{},"body":{"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["inject(matdialogref",{"_index":342,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{}}}],["inject(matsnackbar",{"_index":838,"title":{},"body":{"injectables/ToasterService.html":{}}}],["inject(router",{"_index":237,"title":{},"body":{"components/LoginComponent.html":{},"components/UserComponent.html":{},"miscellaneous/variables.html":{}}}],["inject(store",{"_index":185,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["inject(tasksservice",{"_index":654,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["inject(title",{"_index":243,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["inject(toasterservice",{"_index":695,"title":{},"body":{"injectables/TasksService.html":{},"components/UserComponent.html":{}}}],["injectable",{"_index":77,"title":{"injectables/AuthService.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{},"coverage.html":{}}}],["injectables",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{},"overview.html":{}}}],["injectiontoken('firebaseapp",{"_index":1110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('firebaseauth",{"_index":1111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('firestore",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["input",{"_index":140,"title":{},"body":{"directives/ColorDirective.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{}}}],["inputs",{"_index":115,"title":{},"body":{"directives/ColorDirective.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{}}}],["install",{"_index":1004,"title":{},"body":{"index.html":{}}}],["installenvironment",{"_index":1018,"title":{},"body":{"index.html":{}}}],["installing",{"_index":1014,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":819,"title":{},"body":{"pipes/ToDatePipe.html":{}}}],["interface",{"_index":162,"title":{"interfaces/Filters.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"interfaces/TasksState.html":{}},"body":{"interfaces/Filters.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"interfaces/TasksState.html":{},"coverage.html":{}}}],["interfaces",{"_index":164,"title":{},"body":{"interfaces/Filters.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"overview.html":{}}}],["invalid",{"_index":394,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["isdarkmode",{"_index":779,"title":{},"body":{"injectables/ThemeService.html":{}}}],["isnan(number(key",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["item",{"_index":530,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item'},{'name",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["item.component",{"_index":588,"title":{},"body":{"components/TaskListComponent.html":{}}}],["item.component.html",{"_index":534,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item.component.scss",{"_index":535,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item.component.ts",{"_index":529,"title":{},"body":{"components/TaskItemComponent.html":{},"coverage.html":{}}}],["item.component.ts:41",{"_index":554,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item.component.ts:42",{"_index":555,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item.component.ts:44",{"_index":542,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item.component.ts:46",{"_index":549,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item.component.ts:52",{"_index":547,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item.component.ts:64",{"_index":551,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item.component.ts:69",{"_index":546,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item.component.ts:81",{"_index":544,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["item/task",{"_index":528,"title":{},"body":{"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"coverage.html":{}}}],["json.parse(savedtheme",{"_index":809,"title":{},"body":{"injectables/ThemeService.html":{}}}],["json.stringify(isdarkmode",{"_index":806,"title":{},"body":{"injectables/ThemeService.html":{}}}],["key",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key.tolowercase",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyof",{"_index":170,"title":{},"body":{"interfaces/Filters.html":{},"miscellaneous/variables.html":{}}}],["left",{"_index":215,"title":{},"body":{"components/LoadingComponent.html":{},"components/ThemeComponent.html":{}}}],["legend",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["light",{"_index":764,"title":{},"body":{"components/ThemeComponent.html":{}}}],["lightblue",{"_index":1145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lightgray",{"_index":1143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lightgreen",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":583,"title":{},"body":{"components/TaskListComponent.html":{}}}],["list'},{'name",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["list.component",{"_index":610,"title":{},"body":{"components/TasksComponent.html":{}}}],["list.component.html",{"_index":584,"title":{},"body":{"components/TaskListComponent.html":{}}}],["list.component.scss",{"_index":585,"title":{},"body":{"components/TaskListComponent.html":{}}}],["list.component.ts",{"_index":582,"title":{},"body":{"components/TaskListComponent.html":{},"coverage.html":{}}}],["list.component.ts:15",{"_index":587,"title":{},"body":{"components/TaskListComponent.html":{}}}],["list/task",{"_index":581,"title":{},"body":{"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"coverage.html":{}}}],["load",{"_index":1133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["loading",{"_index":175,"title":{},"body":{"components/LoadingComponent.html":{},"interfaces/RequestStatus.html":{},"miscellaneous/variables.html":{}}}],["loading'},{'name",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["loading.component.html",{"_index":180,"title":{},"body":{"components/LoadingComponent.html":{}}}],["loading.component.scss",{"_index":179,"title":{},"body":{"components/LoadingComponent.html":{}}}],["loadingcomponent",{"_index":17,"title":{"components/LoadingComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["loadtasks",{"_index":608,"title":{},"body":{"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadtasksfailure",{"_index":911,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadtaskssuccess",{"_index":912,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["loadthemefromlocalstorage",{"_index":782,"title":{},"body":{"injectables/ThemeService.html":{}}}],["local",{"_index":1046,"title":{},"body":{"index.html":{}}}],["localstorage.getitem(this.theme_storage_key",{"_index":808,"title":{},"body":{"injectables/ThemeService.html":{}}}],["localstorage.setitem(this.theme_storage_key",{"_index":805,"title":{},"body":{"injectables/ThemeService.html":{}}}],["logged",{"_index":872,"title":{},"body":{"components/UserComponent.html":{}}}],["login",{"_index":220,"title":{},"body":{"components/LoginComponent.html":{},"miscellaneous/enumerations.html":{}}}],["login'},{'name",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["login.component.html",{"_index":222,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":223,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":49,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["loginwithgoogle",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["logonly",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logout",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"components/UserComponent.html":{}}}],["looking",{"_index":270,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["low",{"_index":971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercasequery",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manager",{"_index":1002,"title":{},"body":{"index.html":{}}}],["map",{"_index":380,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"injectables/TasksEffects.html":{}}}],["map((currentuser",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map((key",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map((tasks",{"_index":646,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["map.ts",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["margin",{"_index":521,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["mark",{"_index":498,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["markselectedasdone",{"_index":435,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["mat",{"_index":503,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["mat_dialog_data",{"_index":368,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{}}}],["matbutton",{"_index":260,"title":{},"body":{"components/NotFoundComponent.html":{},"components/TaskFilterComponent.html":{},"components/TasksComponent.html":{},"components/UserComponent.html":{}}}],["matbuttonmodule",{"_index":221,"title":{},"body":{"components/LoginComponent.html":{},"components/ThemeComponent.html":{}}}],["matcard",{"_index":856,"title":{},"body":{"components/UserComponent.html":{}}}],["matcardactions",{"_index":858,"title":{},"body":{"components/UserComponent.html":{}}}],["matcardcontent",{"_index":857,"title":{},"body":{"components/UserComponent.html":{}}}],["matcardmodule",{"_index":531,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["matcheckbox",{"_index":421,"title":{},"body":{"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{}}}],["matching",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matdatepickermodule",{"_index":322,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["matdialog",{"_index":552,"title":{},"body":{"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["matdialogmodule",{"_index":323,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{}}}],["matdialogref",{"_index":369,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{}}}],["matdivider",{"_index":859,"title":{},"body":{"components/UserComponent.html":{}}}],["matformfieldmodule",{"_index":321,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["maticon",{"_index":259,"title":{},"body":{"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{}}}],["matinput",{"_index":324,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["matinputmodule",{"_index":420,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["matmenu",{"_index":422,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["matmenuitem",{"_index":423,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["matmenutrigger",{"_index":424,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["matminifabbutton",{"_index":327,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{}}}],["matoption",{"_index":326,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["matprogressspinner",{"_index":176,"title":{},"body":{"components/LoadingComponent.html":{}}}],["matselect",{"_index":325,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["matsnackbar",{"_index":846,"title":{},"body":{"injectables/ToasterService.html":{}}}],["matsnackbarconfig",{"_index":840,"title":{},"body":{"injectables/ToasterService.html":{}}}],["max",{"_index":519,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["maxage",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["medium",{"_index":972,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mergemap",{"_index":626,"title":{},"body":{"injectables/TasksEffects.html":{},"injectables/TasksService.html":{}}}],["mergemap((querysnapshot",{"_index":716,"title":{},"body":{"injectables/TasksService.html":{}}}],["message",{"_index":831,"title":{},"body":{"injectables/ToasterService.html":{}}}],["messagingsenderid",{"_index":1038,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"pipes/ToDatePipe.html":{},"components/UserComponent.html":{}}}],["methods",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{}}}],["min",{"_index":518,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["miscellaneous",{"_index":960,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mixins",{"_index":197,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{}}}],["mixins.flex",{"_index":208,"title":{},"body":{"components/LoadingComponent.html":{}}}],["mixins.simple",{"_index":515,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["modify",{"_index":1056,"title":{},"body":{"index.html":{}}}],["modules",{"_index":1072,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{}}}],["navigate",{"_index":1051,"title":{},"body":{"index.html":{}}}],["need",{"_index":414,"title":{},"body":{"components/TaskDeleteComponent.html":{},"index.html":{}}}],["new",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"components/LoginComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtask",{"_index":614,"title":{},"body":{"components/TasksComponent.html":{}}}],["ngondestroy",{"_index":436,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["ngoninit",{"_index":336,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"components/TasksComponent.html":{},"components/UserComponent.html":{}}}],["ngrx/effects",{"_index":661,"title":{},"body":{"injectables/TasksEffects.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":195,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"dependencies.html":{}}}],["node",{"_index":1001,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":996,"title":{},"body":{"index.html":{}}}],["nonauthguard",{"_index":890,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["not_found",{"_index":969,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundcomponent",{"_index":51,"title":{"components/NotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["npm",{"_index":1017,"title":{},"body":{"index.html":{}}}],["nskr",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"miscellaneous/variables.html":{}}}],["nskrcolor",{"_index":110,"title":{},"body":{"directives/ColorDirective.html":{}}}],["nskrcolor]'},{'name",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["nskrtodo",{"_index":989,"title":{},"body":{"index.html":{}}}],["null",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"components/UserComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":454,"title":{},"body":{"components/TaskFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["object.keys(priority",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(sortdirection",{"_index":461,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["object.values(status",{"_index":348,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["observable",{"_index":182,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["observable((observer",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observer.complete",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observer.next(router.createurltree(['/auth",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observer.next(true",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observer.next(user",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["of(tasks",{"_index":726,"title":{},"body":{"injectables/TasksService.html":{}}}],["of(tasksactions.bulkupdatetasksfailure",{"_index":631,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["of(tasksactions.createtaskfailure",{"_index":637,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["of(tasksactions.deletetaskfailure",{"_index":642,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["of(tasksactions.loadtasksfailure",{"_index":648,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["of(tasksactions.updatetaskfailure",{"_index":659,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["oftype",{"_index":650,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["oftype(tasksactions.bulkupdatetasks",{"_index":625,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["oftype(tasksactions.createtask",{"_index":634,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["oftype(tasksactions.deletetask",{"_index":639,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["oftype(tasksactions.loadtasks",{"_index":644,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["oftype(tasksactions.updatetask",{"_index":656,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["on(tasksactions.bulkupdatetasks",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.bulkupdatetasksfailure",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.clearfilters",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.createtask",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.createtaskfailure",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.createtasksuccess",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.deletetask",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.deletetaskfailure",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.deletetasksuccess",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.loadtasks",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.loadtasksfailure",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.loadtaskssuccess",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.selectalltasks",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.toggletaskselection",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.updatetask",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.updatetaskfailure",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["on(tasksactions.updatetasksuccess",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onauthstatechanged(auth",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ondestroy",{"_index":418,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["oninit",{"_index":318,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"components/TasksComponent.html":{},"components/UserComponent.html":{}}}],["onsave",{"_index":337,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["open",{"_index":1050,"title":{},"body":{"index.html":{}}}],["openaddtaskdialog",{"_index":596,"title":{},"body":{"components/TasksComponent.html":{}}}],["opendeletetaskdialog",{"_index":538,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["openedittaskdialog",{"_index":539,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["operation",{"_index":689,"title":{},"body":{"injectables/TasksService.html":{}}}],["operation(currentuser.uid",{"_index":749,"title":{},"body":{"injectables/TasksService.html":{}}}],["optimizes",{"_index":1066,"title":{},"body":{"index.html":{}}}],["optional",{"_index":135,"title":{},"body":{"directives/ColorDirective.html":{},"interfaces/Task.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{}}}],["out",{"_index":873,"title":{},"body":{"components/UserComponent.html":{}}}],["overlay",{"_index":199,"title":{},"body":{"components/LoadingComponent.html":{}}}],["overview",{"_index":1073,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":942,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":1015,"title":{},"body":{"index.html":{}}}],["padding",{"_index":507,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["page",{"_index":231,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["pagecomponent",{"_index":73,"title":{"directives/PageComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["pagecomponent:11",{"_index":233,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TasksComponent.html":{}}}],["pagecomponent:12",{"_index":240,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TasksComponent.html":{}}}],["pagecomponent:18",{"_index":235,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TasksComponent.html":{}}}],["pagecomponent:8",{"_index":242,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TasksComponent.html":{}}}],["pagecomponent:9",{"_index":244,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TasksComponent.html":{}}}],["pages/tasks/state/tasks.selectors",{"_index":194,"title":{},"body":{"components/LoadingComponent.html":{}}}],["pagetitle",{"_index":226,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{},"miscellaneous/enumerations.html":{}}}],["panelclass",{"_index":829,"title":{},"body":{"injectables/ToasterService.html":{}}}],["parameters",{"_index":134,"title":{},"body":{"directives/ColorDirective.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{}}}],["partial",{"_index":569,"title":{},"body":{"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{}}}],["past",{"_index":399,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["performance",{"_index":1067,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":810,"title":{"pipes/ToDatePipe.html":{}},"body":{"pipes/ToDatePipe.html":{},"coverage.html":{},"overview.html":{}}}],["pipe(throttletime(100",{"_index":479,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["pipeline",{"_index":1070,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":811,"title":{},"body":{"pipes/ToDatePipe.html":{}}}],["pipetransform",{"_index":818,"title":{},"body":{"pipes/ToDatePipe.html":{}}}],["position",{"_index":211,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/ThemeComponent.html":{}}}],["priorities",{"_index":333,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["priority",{"_index":116,"title":{},"body":{"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"interfaces/TasksState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["priority(value",{"_index":148,"title":{},"body":{"directives/ColorDirective.html":{}}}],["priority.high",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["priority.key",{"_index":401,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["priority.low",{"_index":366,"title":{},"body":{"components/TaskAddEditComponent.html":{},"miscellaneous/variables.html":{}}}],["priority.medium",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["priority[key",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prioritycolors",{"_index":144,"title":{},"body":{"directives/ColorDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prioritymap",{"_index":346,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prioritysignal",{"_index":113,"title":{},"body":{"directives/ColorDirective.html":{}}}],["private",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{}}}],["production",{"_index":1030,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progress",{"_index":981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["project",{"_index":990,"title":{},"body":{"index.html":{}}}],["projectid",{"_index":1040,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["projects",{"_index":1013,"title":{},"body":{"index.html":{}}}],["promise",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":23,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"properties.html":{}}}],["props",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protected",{"_index":227,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["provide",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideanimationsasync",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":159,"title":{},"body":{"directives/ColorDirective.html":{}}}],["providedin",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{}}}],["provideeffects([taskseffects",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providenativedateadapter",{"_index":1101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providestore",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providestoredevtools",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providezonechangedetection",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":766,"title":{},"body":{"components/ThemeComponent.html":{}}}],["pure",{"_index":814,"title":{},"body":{"pipes/ToDatePipe.html":{}}}],["querysnapshot.foreach((docsnap",{"_index":717,"title":{},"body":{"injectables/TasksService.html":{}}}],["reactiveformsmodule",{"_index":320,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["readonly",{"_index":777,"title":{},"body":{"injectables/ThemeService.html":{}}}],["really",{"_index":413,"title":{},"body":{"components/TaskDeleteComponent.html":{}}}],["record",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reload",{"_index":1054,"title":{},"body":{"index.html":{}}}],["reloadtasksafteractions",{"_index":619,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["replace",{"_index":1027,"title":{},"body":{"index.html":{}}}],["requestfailure",{"_index":303,"title":{},"body":{"interfaces/RequestStatus.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requestfailure(error",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requeststatus",{"_index":294,"title":{"interfaces/RequestStatus.html":{}},"body":{"interfaces/RequestStatus.html":{},"interfaces/TasksState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requestsuccess",{"_index":302,"title":{},"body":{"interfaces/RequestStatus.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":388,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["requires",{"_index":998,"title":{},"body":{"index.html":{}}}],["result",{"_index":566,"title":{},"body":{"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["result.map((task",{"_index":485,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["result.user",{"_index":250,"title":{},"body":{"components/LoginComponent.html":{}}}],["results",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":982,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["right",{"_index":524,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["root",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{}}}],["root'},{'name",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["route",{"_index":228,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["router",{"_index":224,"title":{},"body":{"components/LoginComponent.html":{},"components/UserComponent.html":{},"miscellaneous/variables.html":{}}}],["router.createurltree(['tasks",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routerlink",{"_index":261,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["routeroutlet",{"_index":15,"title":{},"body":{"components/AppComponent.html":{}}}],["row",{"_index":209,"title":{},"body":{"components/LoadingComponent.html":{}}}],["run",{"_index":1047,"title":{},"body":{"index.html":{}}}],["running",{"_index":1049,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":191,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":700,"title":{},"body":{"injectables/TasksService.html":{}}}],["saddlebrown",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["savedtheme",{"_index":807,"title":{},"body":{"injectables/ThemeService.html":{}}}],["savethemetolocalstorage",{"_index":783,"title":{},"body":{"injectables/ThemeService.html":{}}}],["savethemetolocalstorage(isdarkmode",{"_index":790,"title":{},"body":{"injectables/ThemeService.html":{}}}],["search",{"_index":495,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["search_off",{"_index":265,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["search_off404",{"_index":273,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["searchquery",{"_index":166,"title":{},"body":{"interfaces/Filters.html":{},"components/TaskFilterComponent.html":{},"interfaces/TasksState.html":{},"miscellaneous/variables.html":{}}}],["searchquery.tolowercase",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["section",{"_index":514,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["select",{"_index":496,"title":{},"body":{"components/TaskFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["selectalltasks",{"_index":469,"title":{},"body":{"components/TaskFilterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectarealltasksselected",{"_index":472,"title":{},"body":{"components/TaskFilterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectaresometasksselected",{"_index":473,"title":{},"body":{"components/TaskFilterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selected",{"_index":444,"title":{},"body":{"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"miscellaneous/variables.html":{}}}],["selectedtasks",{"_index":432,"title":{},"body":{"components/TaskFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["selecterror",{"_index":918,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectfilteredandsortedtasks",{"_index":606,"title":{},"body":{"components/TasksComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selectfilters",{"_index":919,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selection",{"_index":1135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectloading",{"_index":193,"title":{},"body":{"components/LoadingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["selectselectedtasks",{"_index":474,"title":{},"body":{"components/TaskFilterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selecttasks",{"_index":920,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["selecttasksstate",{"_index":921,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":1045,"title":{},"body":{"index.html":{}}}],["services/tasks.service",{"_index":664,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["set",{"_index":147,"title":{},"body":{"directives/ColorDirective.html":{},"miscellaneous/variables.html":{}}}],["setfilters",{"_index":470,"title":{},"body":{"components/TaskFilterComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["setpagetitle",{"_index":230,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["setpriority(value",{"_index":133,"title":{},"body":{"directives/ColorDirective.html":{}}}],["setstatus(value",{"_index":137,"title":{},"body":{"directives/ColorDirective.html":{}}}],["settheme",{"_index":784,"title":{},"body":{"injectables/ThemeService.html":{}}}],["settheme(isdarkmode",{"_index":792,"title":{},"body":{"injectables/ThemeService.html":{}}}],["setup",{"_index":997,"title":{},"body":{"index.html":{}}}],["shared/components/loading/loading.component",{"_index":37,"title":{},"body":{"components/AppComponent.html":{}}}],["shared/components/theme/theme.component",{"_index":36,"title":{},"body":{"components/AppComponent.html":{}}}],["shared/components/theme/theme.service",{"_index":773,"title":{},"body":{"components/ThemeComponent.html":{}}}],["shared/pipes/to",{"_index":560,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["shared/services/toaster.service",{"_index":709,"title":{},"body":{"injectables/TasksService.html":{},"components/UserComponent.html":{}}}],["shared/validators",{"_index":378,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["showerrormessage",{"_index":825,"title":{},"body":{"injectables/ToasterService.html":{}}}],["showerrormessage(message",{"_index":832,"title":{},"body":{"injectables/ToasterService.html":{}}}],["showsuccessmessage",{"_index":826,"title":{},"body":{"injectables/ToasterService.html":{}}}],["showsuccessmessage(message",{"_index":834,"title":{},"body":{"injectables/ToasterService.html":{}}}],["showwarningmessage",{"_index":827,"title":{},"body":{"injectables/ToasterService.html":{}}}],["showwarningmessage(message",{"_index":836,"title":{},"body":{"injectables/ToasterService.html":{}}}],["signal",{"_index":141,"title":{},"body":{"directives/ColorDirective.html":{}}}],["signal(null",{"_index":129,"title":{},"body":{"directives/ColorDirective.html":{}}}],["signinwithpopup",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["signinwithpopup(this.auth",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["signout",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["signout(this.auth",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["snapshot",{"_index":718,"title":{},"body":{"injectables/TasksService.html":{}}}],["snapshot.completiondate",{"_index":725,"title":{},"body":{"injectables/TasksService.html":{}}}],["snapshot.creationdate",{"_index":722,"title":{},"body":{"injectables/TasksService.html":{}}}],["snapshot.duedate",{"_index":724,"title":{},"body":{"injectables/TasksService.html":{}}}],["somewhere",{"_index":272,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["sort",{"_index":492,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["sortby",{"_index":167,"title":{},"body":{"interfaces/Filters.html":{},"components/TaskFilterComponent.html":{},"interfaces/TasksState.html":{},"miscellaneous/variables.html":{}}}],["sortdirection",{"_index":168,"title":{},"body":{"interfaces/Filters.html":{},"components/TaskFilterComponent.html":{},"interfaces/TasksState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sortdirection.asc",{"_index":757,"title":{},"body":{"interfaces/TasksState.html":{},"miscellaneous/variables.html":{}}}],["sortdirections",{"_index":433,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["sortprop",{"_index":493,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["sorttasks",{"_index":926,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"index.html":{}}}],["source$.pipe",{"_index":750,"title":{},"body":{"injectables/TasksService.html":{}}}],["speed",{"_index":1068,"title":{},"body":{"index.html":{}}}],["spinner",{"_index":190,"title":{},"body":{"components/LoadingComponent.html":{}}}],["src/.../app.config.ts",{"_index":1079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.guard.ts",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../colors.ts",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../due",{"_index":984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../environment.example.ts",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../filter.utils.ts",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase.config.ts",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../non",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../page",{"_index":962,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../priority",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../priority.enum.ts",{"_index":964,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../request",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sort",{"_index":965,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../store.ts",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tasks.actions.ts",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tasks.reducer.ts",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tasks.selectors.ts",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tasks.state.ts",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../xss.vaidator.ts",{"_index":985,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:13",{"_index":32,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":881,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/base/page.ts",{"_index":278,"title":{},"body":{"directives/PageComponent.html":{},"coverage.html":{}}}],["src/app/core/base/page.ts:11",{"_index":280,"title":{},"body":{"directives/PageComponent.html":{}}}],["src/app/core/base/page.ts:12",{"_index":279,"title":{},"body":{"directives/PageComponent.html":{}}}],["src/app/core/base/page.ts:18",{"_index":281,"title":{},"body":{"directives/PageComponent.html":{}}}],["src/app/core/base/page.ts:8",{"_index":282,"title":{},"body":{"directives/PageComponent.html":{}}}],["src/app/core/base/page.ts:9",{"_index":283,"title":{},"body":{"directives/PageComponent.html":{}}}],["src/app/core/enums/page",{"_index":968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/core/guards/auth.guard.ts",{"_index":886,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/guards/non",{"_index":888,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/services/auth.service.ts",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/core/services/auth.service.ts:14",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:16",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:20",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/core/services/auth.service.ts:25",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/firebase.config.ts",{"_index":892,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/pages/auth/login/login.component.ts",{"_index":218,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/pages/auth/login/login.component.ts:19",{"_index":236,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/pages/auth/login/login.component.ts:20",{"_index":238,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/pages/auth/login/login.component.ts:22",{"_index":234,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/pages/not",{"_index":255,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["src/app/pages/tasks/components/task",{"_index":314,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"coverage.html":{}}}],["src/app/pages/tasks/components/user/user.component.ts",{"_index":855,"title":{},"body":{"components/UserComponent.html":{},"coverage.html":{}}}],["src/app/pages/tasks/components/user/user.component.ts:27",{"_index":864,"title":{},"body":{"components/UserComponent.html":{}}}],["src/app/pages/tasks/components/user/user.component.ts:28",{"_index":867,"title":{},"body":{"components/UserComponent.html":{}}}],["src/app/pages/tasks/components/user/user.component.ts:29",{"_index":866,"title":{},"body":{"components/UserComponent.html":{}}}],["src/app/pages/tasks/components/user/user.component.ts:31",{"_index":865,"title":{},"body":{"components/UserComponent.html":{}}}],["src/app/pages/tasks/components/user/user.component.ts:33",{"_index":863,"title":{},"body":{"components/UserComponent.html":{}}}],["src/app/pages/tasks/components/user/user.component.ts:37",{"_index":862,"title":{},"body":{"components/UserComponent.html":{}}}],["src/app/pages/tasks/constants/colors.ts",{"_index":901,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/pages/tasks/directives/color.directive.ts",{"_index":109,"title":{},"body":{"directives/ColorDirective.html":{},"coverage.html":{}}}],["src/app/pages/tasks/directives/color.directive.ts:13",{"_index":126,"title":{},"body":{"directives/ColorDirective.html":{}}}],["src/app/pages/tasks/directives/color.directive.ts:15",{"_index":131,"title":{},"body":{"directives/ColorDirective.html":{}}}],["src/app/pages/tasks/directives/color.directive.ts:16",{"_index":132,"title":{},"body":{"directives/ColorDirective.html":{}}}],["src/app/pages/tasks/directives/color.directive.ts:17",{"_index":130,"title":{},"body":{"directives/ColorDirective.html":{}}}],["src/app/pages/tasks/directives/color.directive.ts:20",{"_index":124,"title":{},"body":{"directives/ColorDirective.html":{}}}],["src/app/pages/tasks/directives/color.directive.ts:25",{"_index":125,"title":{},"body":{"directives/ColorDirective.html":{}}}],["src/app/pages/tasks/directives/color.directive.ts:27",{"_index":123,"title":{},"body":{"directives/ColorDirective.html":{}}}],["src/app/pages/tasks/enums/priority.enum.ts",{"_index":970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/pages/tasks/enums/sort",{"_index":976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/pages/tasks/enums/status.enum.ts",{"_index":979,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/pages/tasks/interfaces/filters.interface.ts",{"_index":165,"title":{},"body":{"interfaces/Filters.html":{},"coverage.html":{}}}],["src/app/pages/tasks/interfaces/task.interface.ts",{"_index":304,"title":{},"body":{"interfaces/Task.html":{},"coverage.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts",{"_index":666,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts:101",{"_index":674,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts:118",{"_index":688,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts:130",{"_index":684,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts:31",{"_index":694,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts:32",{"_index":692,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts:33",{"_index":696,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts:35",{"_index":678,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts:64",{"_index":676,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts:79",{"_index":680,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/pages/tasks/services/tasks.service.ts:90",{"_index":677,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/pages/tasks/state/tasks.actions.ts",{"_index":904,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/pages/tasks/state/tasks.effects.ts",{"_index":617,"title":{},"body":{"injectables/TasksEffects.html":{},"coverage.html":{}}}],["src/app/pages/tasks/state/tasks.effects.ts:10",{"_index":655,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["src/app/pages/tasks/state/tasks.effects.ts:12",{"_index":649,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["src/app/pages/tasks/state/tasks.effects.ts:26",{"_index":638,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["src/app/pages/tasks/state/tasks.effects.ts:40",{"_index":660,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["src/app/pages/tasks/state/tasks.effects.ts:54",{"_index":643,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["src/app/pages/tasks/state/tasks.effects.ts:68",{"_index":633,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["src/app/pages/tasks/state/tasks.effects.ts:84",{"_index":653,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["src/app/pages/tasks/state/tasks.effects.ts:9",{"_index":622,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["src/app/pages/tasks/state/tasks.reducer.ts",{"_index":915,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/pages/tasks/state/tasks.selectors.ts",{"_index":917,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/pages/tasks/state/tasks.state.ts",{"_index":754,"title":{},"body":{"interfaces/TasksState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/pages/tasks/state/utils/filter.utils.ts",{"_index":922,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/pages/tasks/state/utils/request",{"_index":295,"title":{},"body":{"interfaces/RequestStatus.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/pages/tasks/tasks.component.ts",{"_index":592,"title":{},"body":{"components/TasksComponent.html":{},"coverage.html":{}}}],["src/app/pages/tasks/tasks.component.ts:22",{"_index":602,"title":{},"body":{"components/TasksComponent.html":{}}}],["src/app/pages/tasks/tasks.component.ts:23",{"_index":601,"title":{},"body":{"components/TasksComponent.html":{}}}],["src/app/pages/tasks/tasks.component.ts:25",{"_index":604,"title":{},"body":{"components/TasksComponent.html":{}}}],["src/app/pages/tasks/tasks.component.ts:27",{"_index":599,"title":{},"body":{"components/TasksComponent.html":{}}}],["src/app/pages/tasks/tasks.component.ts:31",{"_index":600,"title":{},"body":{"components/TasksComponent.html":{}}}],["src/app/pages/tasks/tasks.component.ts:39",{"_index":598,"title":{},"body":{"components/TasksComponent.html":{}}}],["src/app/pages/tasks/utils/priority",{"_index":929,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/components/loading/loading.component.ts",{"_index":172,"title":{},"body":{"components/LoadingComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/loading/loading.component.ts:16",{"_index":186,"title":{},"body":{"components/LoadingComponent.html":{}}}],["src/app/shared/components/loading/loading.component.ts:17",{"_index":184,"title":{},"body":{"components/LoadingComponent.html":{}}}],["src/app/shared/components/theme/theme.component.ts",{"_index":758,"title":{},"body":{"components/ThemeComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/theme/theme.component.ts:25",{"_index":770,"title":{},"body":{"components/ThemeComponent.html":{}}}],["src/app/shared/components/theme/theme.component.ts:26",{"_index":772,"title":{},"body":{"components/ThemeComponent.html":{}}}],["src/app/shared/components/theme/theme.component.ts:28",{"_index":771,"title":{},"body":{"components/ThemeComponent.html":{}}}],["src/app/shared/components/theme/theme.service.ts",{"_index":776,"title":{},"body":{"injectables/ThemeService.html":{},"coverage.html":{}}}],["src/app/shared/components/theme/theme.service.ts:16",{"_index":794,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/shared/components/theme/theme.service.ts:22",{"_index":793,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/shared/components/theme/theme.service.ts:28",{"_index":798,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/shared/components/theme/theme.service.ts:32",{"_index":788,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/shared/components/theme/theme.service.ts:40",{"_index":791,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/shared/components/theme/theme.service.ts:44",{"_index":789,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/shared/components/theme/theme.service.ts:7",{"_index":795,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/shared/components/theme/theme.service.ts:8",{"_index":796,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/shared/components/theme/theme.service.ts:9",{"_index":786,"title":{},"body":{"injectables/ThemeService.html":{}}}],["src/app/shared/pipes/to",{"_index":812,"title":{},"body":{"pipes/ToDatePipe.html":{},"coverage.html":{}}}],["src/app/shared/services/toaster.service.ts",{"_index":821,"title":{},"body":{"injectables/ToasterService.html":{},"coverage.html":{}}}],["src/app/shared/services/toaster.service.ts:10",{"_index":845,"title":{},"body":{"injectables/ToasterService.html":{}}}],["src/app/shared/services/toaster.service.ts:16",{"_index":835,"title":{},"body":{"injectables/ToasterService.html":{}}}],["src/app/shared/services/toaster.service.ts:20",{"_index":837,"title":{},"body":{"injectables/ToasterService.html":{}}}],["src/app/shared/services/toaster.service.ts:24",{"_index":833,"title":{},"body":{"injectables/ToasterService.html":{}}}],["src/app/shared/services/toaster.service.ts:28",{"_index":830,"title":{},"body":{"injectables/ToasterService.html":{}}}],["src/app/shared/services/toaster.service.ts:8",{"_index":839,"title":{},"body":{"injectables/ToasterService.html":{}}}],["src/app/shared/validators/due",{"_index":931,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/shared/validators/xss.vaidator.ts",{"_index":933,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/store.ts",{"_index":934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.example.ts",{"_index":936,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.prod.ts",{"_index":938,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1024,"title":{},"body":{"index.html":{}}}],["started",{"_index":988,"title":{"index.html":{}},"body":{}}],["startloading",{"_index":300,"title":{},"body":{"interfaces/RequestStatus.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["startonce",{"_index":1048,"title":{},"body":{"index.html":{}}}],["state",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.filters",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.requeststatus.error",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.requeststatus.loading",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.tasks",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.tasks.filter((task",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.tasks.map((task",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/tasks.actions",{"_index":471,"title":{},"body":{"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["state/tasks.selectors",{"_index":475,"title":{},"body":{"components/TaskFilterComponent.html":{},"components/TasksComponent.html":{}}}],["statements",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":117,"title":{},"body":{"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"interfaces/TasksState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["status(value",{"_index":150,"title":{},"body":{"directives/ColorDirective.html":{}}}],["status.done",{"_index":382,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"miscellaneous/variables.html":{}}}],["status.in_progress",{"_index":1144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["status.review",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["status.todo",{"_index":364,"title":{},"body":{"components/TaskAddEditComponent.html":{},"miscellaneous/variables.html":{}}}],["status.utils.ts",{"_index":296,"title":{},"body":{"interfaces/RequestStatus.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["statuscolors",{"_index":145,"title":{},"body":{"directives/ColorDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["statuses",{"_index":334,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["statussignal",{"_index":114,"title":{},"body":{"directives/ColorDirective.html":{}}}],["sticky",{"_index":511,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["storagebucket",{"_index":1042,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["store",{"_index":181,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"index.html":{}}}],["string",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{},"miscellaneous/variables.html":{}}}],["style.background",{"_index":119,"title":{},"body":{"directives/ColorDirective.html":{}}}],["styles",{"_index":171,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/ThemeComponent.html":{}}}],["styleurl",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/UserComponent.html":{}}}],["styleurls",{"_index":178,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{}}}],["subscribe((filters",{"_index":480,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["subscription",{"_index":452,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["success",{"_index":850,"title":{},"body":{"injectables/ToasterService.html":{},"miscellaneous/variables.html":{}}}],["successmessage",{"_index":682,"title":{},"body":{"injectables/TasksService.html":{}}}],["t",{"_index":685,"title":{},"body":{"injectables/TasksService.html":{}}}],["table",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":466,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["tap",{"_index":698,"title":{},"body":{"injectables/TasksService.html":{}}}],["task",{"_index":54,"title":{"interfaces/Task.html":{}},"body":{"components/AppComponent.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"interfaces/Task.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["task.checkmark",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["task.checkmark).length",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["task.completiondate",{"_index":579,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["task.description",{"_index":575,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["task.description.tolowercase().includes(lowercasequery",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["task.duedate",{"_index":576,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["task.id",{"_index":486,"title":{},"body":{"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"miscellaneous/variables.html":{}}}],["task.interface",{"_index":169,"title":{},"body":{"interfaces/Filters.html":{}}}],["task.priority",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["task.status",{"_index":574,"title":{},"body":{"components/TaskItemComponent.html":{},"miscellaneous/variables.html":{}}}],["taskaddeditcomponent",{"_index":53,"title":{"components/TaskAddEditComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["taskdeletecomponent",{"_index":57,"title":{"components/TaskDeleteComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["taskdoc",{"_index":732,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskfiltercomponent",{"_index":59,"title":{"components/TaskFilterComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["taskform",{"_index":335,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["taskform.get(\"description\")?.haserror(\"maxlength",{"_index":389,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["taskform.get(\"description\")?.haserror(\"required",{"_index":387,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["taskform.get(\"description\")?.haserror(\"xssdetected",{"_index":393,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["taskform.get(\"duedate\")?.haserror(\"pastdate",{"_index":397,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["taskform.get(\"duedate\")?.touched",{"_index":398,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["taskid",{"_index":545,"title":{},"body":{"components/TaskItemComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["taskids",{"_index":484,"title":{},"body":{"components/TaskFilterComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["taskids.includes(task.id",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["taskids.map((taskid",{"_index":742,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskitemcomponent",{"_index":61,"title":{"components/TaskItemComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["tasklistcomponent",{"_index":63,"title":{"components/TaskListComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["tasks",{"_index":586,"title":{},"body":{"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["tasks'},{'name",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["tasks.actions",{"_index":663,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["tasks.component.html",{"_index":593,"title":{},"body":{"components/TasksComponent.html":{}}}],["tasks.component.scss",{"_index":594,"title":{},"body":{"components/TasksComponent.html":{}}}],["tasks.every((task",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tasks.filter((task",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tasks.length",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tasks.push",{"_index":720,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks.v",{"_index":590,"title":{},"body":{"components/TaskListComponent.html":{}}}],["tasks.v.length",{"_index":591,"title":{},"body":{"components/TaskListComponent.html":{}}}],["tasks].sort((a",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tasksactions",{"_index":662,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["tasksactions.bulkupdatetaskssuccess",{"_index":629,"title":{},"body":{"injectables/TasksEffects.html":{},"miscellaneous/variables.html":{}}}],["tasksactions.createtasksuccess",{"_index":636,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["tasksactions.deletetasksuccess",{"_index":641,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["tasksactions.loadtasks",{"_index":652,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["tasksactions.loadtaskssuccess",{"_index":647,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["tasksactions.setfilters",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tasksactions.updatetasksuccess",{"_index":651,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["taskscollection",{"_index":712,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskscomponent",{"_index":65,"title":{"components/TasksComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["taskseffects",{"_index":616,"title":{"injectables/TasksEffects.html":{}},"body":{"injectables/TasksEffects.html":{},"coverage.html":{}}}],["tasksreducer",{"_index":916,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tasksservice",{"_index":620,"title":{"injectables/TasksService.html":{}},"body":{"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasksstate",{"_index":753,"title":{"interfaces/TasksState.html":{}},"body":{"interfaces/TasksState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["templateurl",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/UserComponent.html":{}}}],["theme",{"_index":759,"title":{},"body":{"components/ThemeComponent.html":{},"injectables/ThemeService.html":{}}}],["theme'},{'name",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["theme_storage_key",{"_index":780,"title":{},"body":{"injectables/ThemeService.html":{}}}],["themecomponent",{"_index":16,"title":{"components/ThemeComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["themeservice",{"_index":767,"title":{"injectables/ThemeService.html":{}},"body":{"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"coverage.html":{}}}],["themeservice.currenttheme",{"_index":763,"title":{},"body":{"components/ThemeComponent.html":{}}}],["then((result",{"_index":248,"title":{},"body":{"components/LoginComponent.html":{}}}],["this._showmessage(message",{"_index":849,"title":{},"body":{"injectables/ToasterService.html":{}}}],["this._snackbar.open(message",{"_index":852,"title":{},"body":{"injectables/ToasterService.html":{}}}],["this.actions$.pipe",{"_index":624,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["this.addtask(result",{"_index":613,"title":{},"body":{"components/TasksComponent.html":{}}}],["this.applytheme(this.isdarkmode",{"_index":801,"title":{},"body":{"injectables/ThemeService.html":{}}}],["this.auth.currentuser",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.getcurrentuser",{"_index":746,"title":{},"body":{"injectables/TasksService.html":{},"components/UserComponent.html":{}}}],["this.authservice.logout().then",{"_index":870,"title":{},"body":{"components/UserComponent.html":{}}}],["this.backgroundcolor",{"_index":160,"title":{},"body":{"directives/ColorDirective.html":{}}}],["this.colorsignal",{"_index":161,"title":{},"body":{"directives/ColorDirective.html":{}}}],["this.colorsignal.set(prioritycolors[priority",{"_index":155,"title":{},"body":{"directives/ColorDirective.html":{}}}],["this.colorsignal.set(statuscolors[status",{"_index":156,"title":{},"body":{"directives/ColorDirective.html":{}}}],["this.currentuser",{"_index":869,"title":{},"body":{"components/UserComponent.html":{}}}],["this.data?.completiondate",{"_index":362,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.data?.creationdate",{"_index":360,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.data?.description",{"_index":351,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.data?.duedate",{"_index":355,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.data?.priority",{"_index":365,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.data?.status",{"_index":363,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.defaultconfig",{"_index":854,"title":{},"body":{"injectables/ToasterService.html":{}}}],["this.deletetask(result",{"_index":572,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["this.dialog.open(taskaddeditcomponent",{"_index":563,"title":{},"body":{"components/TaskItemComponent.html":{},"components/TasksComponent.html":{}}}],["this.dialog.open(taskdeletecomponent",{"_index":571,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["this.dialogref.close(this.data.id",{"_index":412,"title":{},"body":{"components/TaskDeleteComponent.html":{}}}],["this.dialogref.close(this.taskform.getrawvalue",{"_index":386,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.fb.group",{"_index":350,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["this.filterform.setvalue",{"_index":489,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.filterform.valuechanges",{"_index":478,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.filterssub",{"_index":477,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.filterssub$.unsubscribe",{"_index":491,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.firestore",{"_index":713,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.initformstate",{"_index":450,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.isdarkmode",{"_index":799,"title":{},"body":{"injectables/ThemeService.html":{}}}],["this.loadthemefromlocalstorage",{"_index":800,"title":{},"body":{"injectables/ThemeService.html":{}}}],["this.pagetitle",{"_index":292,"title":{},"body":{"directives/PageComponent.html":{}}}],["this.prioritysignal",{"_index":152,"title":{},"body":{"directives/ColorDirective.html":{}}}],["this.prioritysignal.set(value",{"_index":149,"title":{},"body":{"directives/ColorDirective.html":{}}}],["this.route.snapshot.routeconfig?.title",{"_index":291,"title":{},"body":{"directives/PageComponent.html":{}}}],["this.router.navigate(['/auth",{"_index":874,"title":{},"body":{"components/UserComponent.html":{}}}],["this.router.navigate(['tasks",{"_index":251,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.savethemetolocalstorage(this.isdarkmode",{"_index":802,"title":{},"body":{"injectables/ThemeService.html":{}}}],["this.selectedtasks$.pipe(take(1)).subscribe((result",{"_index":483,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.setpagetitle",{"_index":290,"title":{},"body":{"directives/PageComponent.html":{}}}],["this.sortdirections[0",{"_index":455,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.statussignal",{"_index":153,"title":{},"body":{"directives/ColorDirective.html":{}}}],["this.statussignal.set(value",{"_index":151,"title":{},"body":{"directives/ColorDirective.html":{}}}],["this.store.dispatch",{"_index":487,"title":{},"body":{"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{}}}],["this.store.dispatch(clearfilters",{"_index":490,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.store.dispatch(createtask",{"_index":615,"title":{},"body":{"components/TasksComponent.html":{}}}],["this.store.dispatch(deletetask",{"_index":573,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["this.store.dispatch(loadtasks",{"_index":612,"title":{},"body":{"components/TasksComponent.html":{}}}],["this.store.dispatch(selectalltasks",{"_index":482,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.store.dispatch(setfilters(filters",{"_index":481,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.store.dispatch(updatetask",{"_index":570,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["this.store.select(selectarealltasksselected",{"_index":445,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.store.select(selectaresometasksselected",{"_index":447,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.store.select(selectfilteredandsortedtasks",{"_index":603,"title":{},"body":{"components/TasksComponent.html":{}}}],["this.store.select(selectloading",{"_index":183,"title":{},"body":{"components/LoadingComponent.html":{}}}],["this.store.select(selectselectedtasks",{"_index":458,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["this.task",{"_index":564,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["this.task.id",{"_index":562,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["this.taskform.get('completiondate')?.setvalue(new",{"_index":383,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.taskform.get('completiondate')?.setvalue(null",{"_index":384,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.taskform.get('status')?.valuechanges.subscribe((status",{"_index":381,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.taskform.valid",{"_index":385,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["this.tasksservice.bulkupdate(taskids",{"_index":627,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["this.tasksservice.createtask(task).pipe",{"_index":635,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["this.tasksservice.deletetask(taskid).pipe",{"_index":640,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["this.tasksservice.gettasksforuser().pipe",{"_index":645,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["this.tasksservice.updatetask(taskid",{"_index":657,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["this.themeservice.toggletheme",{"_index":775,"title":{},"body":{"components/ThemeComponent.html":{}}}],["this.titleservice.settitle(title",{"_index":293,"title":{},"body":{"directives/PageComponent.html":{}}}],["this.toasterservice.showerrormessage(errormessage",{"_index":752,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.toasterservice.showsuccessmessage(successmessage",{"_index":751,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.toasterservice.showwarningmessage('user",{"_index":871,"title":{},"body":{"components/UserComponent.html":{}}}],["this.updatetask(result",{"_index":567,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["this.withtoast",{"_index":727,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.withuserid((userid",{"_index":711,"title":{},"body":{"injectables/TasksService.html":{}}}],["throttletime",{"_index":467,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["throw",{"_index":157,"title":{},"body":{"directives/ColorDirective.html":{}}}],["throwerror",{"_index":699,"title":{},"body":{"injectables/TasksService.html":{}}}],["timestamp",{"_index":312,"title":{},"body":{"interfaces/Task.html":{},"injectables/TasksService.html":{},"pipes/ToDatePipe.html":{}}}],["timestamp).todate",{"_index":723,"title":{},"body":{"injectables/TasksService.html":{}}}],["title",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"directives/PageComponent.html":{}}}],["title.enum",{"_index":285,"title":{},"body":{"directives/PageComponent.html":{}}}],["title.enum.ts",{"_index":963,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["titleservice",{"_index":229,"title":{},"body":{"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TasksComponent.html":{}}}],["toasterservice",{"_index":668,"title":{"injectables/ToasterService.html":{}},"body":{"injectables/TasksService.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["todate",{"_index":577,"title":{},"body":{"components/TaskItemComponent.html":{},"pipes/ToDatePipe.html":{}}}],["todatepipe",{"_index":533,"title":{"pipes/ToDatePipe.html":{}},"body":{"components/TaskItemComponent.html":{},"pipes/ToDatePipe.html":{},"coverage.html":{}}}],["todo",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["todo.firebaseapp.com",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo.firebasestorage.app",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toggle",{"_index":1134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toggleselectall",{"_index":437,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["toggleselectall(selected",{"_index":442,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["toggletaskselection",{"_index":540,"title":{},"body":{"components/TaskItemComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["toggletaskselection(value",{"_index":548,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["toggletheme",{"_index":768,"title":{},"body":{"components/ThemeComponent.html":{},"injectables/ThemeService.html":{}}}],["top",{"_index":213,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/ThemeComponent.html":{}}}],["totaltasks",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["track",{"_index":400,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskListComponent.html":{}}}],["transform",{"_index":815,"title":{},"body":{"pipes/ToDatePipe.html":{}}}],["transform(value",{"_index":816,"title":{},"body":{"pipes/ToDatePipe.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["true",{"_index":301,"title":{},"body":{"interfaces/RequestStatus.html":{},"components/TaskAddEditComponent.html":{},"pipes/ToDatePipe.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"directives/ColorDirective.html":{},"interfaces/Filters.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"interfaces/RequestStatus.html":{},"interfaces/Task.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"interfaces/TasksState.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uid",{"_index":249,"title":{},"body":{"components/LoginComponent.html":{}}}],["undefined",{"_index":154,"title":{},"body":{"directives/ColorDirective.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"miscellaneous/variables.html":{}}}],["unsubscribe",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":737,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["updated",{"_index":736,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatedfields",{"_index":488,"title":{},"body":{"components/TaskFilterComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["updatedfields).pipe",{"_index":628,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["updatedoc",{"_index":704,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatedtask",{"_index":568,"title":{},"body":{"components/TaskItemComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["updatedtask).pipe",{"_index":658,"title":{},"body":{"injectables/TasksEffects.html":{}}}],["updateon",{"_index":358,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["updatetask",{"_index":541,"title":{},"body":{"components/TaskItemComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatetask(task",{"_index":550,"title":{},"body":{"components/TaskItemComponent.html":{}}}],["updatetask(taskid",{"_index":679,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskfailure",{"_index":913,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatetasks",{"_index":741,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetasksuccess",{"_index":914,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["updating",{"_index":744,"title":{},"body":{"injectables/TasksService.html":{}}}],["use",{"_index":196,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"index.html":{}}}],["usefactory",{"_index":1103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"miscellaneous/variables.html":{}}}],["user.component.html",{"_index":860,"title":{},"body":{"components/UserComponent.html":{}}}],["user.component.scss",{"_index":861,"title":{},"body":{"components/UserComponent.html":{}}}],["usercomponent",{"_index":68,"title":{"components/UserComponent.html":{}},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{},"coverage.html":{}}}],["usercredential",{"_index":247,"title":{},"body":{"components/LoginComponent.html":{}}}],["userid",{"_index":687,"title":{},"body":{"injectables/TasksService.html":{}}}],["users/${userid}/tasks",{"_index":714,"title":{},"body":{"injectables/TasksService.html":{}}}],["users/${userid}/tasks/${taskid",{"_index":734,"title":{},"body":{"injectables/TasksService.html":{}}}],["uses",{"_index":1020,"title":{},"body":{"index.html":{}}}],["using",{"_index":992,"title":{},"body":{"index.html":{}}}],["utils",{"_index":755,"title":{},"body":{"interfaces/TasksState.html":{}}}],["utils/priority",{"_index":379,"title":{},"body":{"components/TaskAddEditComponent.html":{},"components/TaskFilterComponent.html":{}}}],["v",{"_index":589,"title":{},"body":{"components/TaskListComponent.html":{}}}],["v20",{"_index":999,"title":{},"body":{"index.html":{}}}],["validationerrors",{"_index":986,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validators",{"_index":356,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["validators.maxlength(200",{"_index":353,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["validators.required",{"_index":352,"title":{},"body":{"components/TaskAddEditComponent.html":{}}}],["value",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"directives/ColorDirective.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksEffects.html":{},"injectables/TasksService.html":{},"injectables/ThemeService.html":{},"pipes/ToDatePipe.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.todate",{"_index":820,"title":{},"body":{"pipes/ToDatePipe.html":{}}}],["var",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TaskListComponent.html":{},"components/TasksComponent.html":{},"components/ThemeComponent.html":{},"components/UserComponent.html":{}}}],["variable",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1078,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":995,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versions",{"_index":1011,"title":{},"body":{"index.html":{}}}],["vertical",{"_index":506,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["verticalposition",{"_index":844,"title":{},"body":{"injectables/ToasterService.html":{}}}],["void",{"_index":136,"title":{},"body":{"directives/ColorDirective.html":{},"components/LoginComponent.html":{},"components/NotFoundComponent.html":{},"directives/PageComponent.html":{},"components/TaskAddEditComponent.html":{},"components/TaskDeleteComponent.html":{},"components/TaskFilterComponent.html":{},"components/TaskItemComponent.html":{},"components/TasksComponent.html":{},"injectables/TasksService.html":{},"components/ThemeComponent.html":{},"injectables/ThemeService.html":{},"injectables/ToasterService.html":{},"components/UserComponent.html":{}}}],["warning",{"_index":851,"title":{},"body":{"injectables/ToasterService.html":{}}}],["whenever",{"_index":1055,"title":{},"body":{"index.html":{}}}],["white",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width",{"_index":200,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{}}}],["withtoast",{"_index":671,"title":{},"body":{"injectables/TasksService.html":{}}}],["withtoast(source",{"_index":681,"title":{},"body":{"injectables/TasksService.html":{}}}],["withuserid",{"_index":672,"title":{},"body":{"injectables/TasksService.html":{}}}],["withuserid(operation",{"_index":686,"title":{},"body":{"injectables/TasksService.html":{}}}],["wrapper",{"_index":526,"title":{},"body":{"components/TaskFilterComponent.html":{}}}],["x",{"_index":853,"title":{},"body":{"injectables/ToasterService.html":{}}}],["xssvalidator",{"_index":354,"title":{},"body":{"components/TaskAddEditComponent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["you'll",{"_index":1025,"title":{},"body":{"index.html":{}}}],["you're",{"_index":269,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["you\\'re",{"_index":276,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["your_api_key",{"_index":1033,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["your_app_id",{"_index":1035,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["your_auth_domain",{"_index":1037,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["your_messaging_sender_id",{"_index":1039,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["your_project_id",{"_index":1041,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["your_storage_bucket",{"_index":1043,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["z",{"_index":216,"title":{},"body":{"components/LoadingComponent.html":{},"components/TaskFilterComponent.html":{},"components/ThemeComponent.html":{}}}],["zone.js",{"_index":958,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-root\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                                ThemeComponent\n                                LoadingComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nskr-todo'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { ThemeComponent } from '@shared/components/theme/theme.component';\nimport { LoadingComponent } from '@shared/components/loading/loading.component';\n\n@Component({\n  selector: 'nskr-root',\n  imports: [RouterOutlet, ThemeComponent, LoadingComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  title = 'nskr-todo';\n}\n\n    \n\n    \n        \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                auth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUser\n                            \n                            \n                                    Async\n                                loginWithGoogle\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     User | null\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loginWithGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithGoogle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getAuth()\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/auth.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {\n  getAuth,\n  GoogleAuthProvider,\n  signInWithPopup,\n  signOut,\n  User,\n} from 'firebase/auth';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private auth = getAuth();\n\n  getCurrentUser(): User | null {\n    return this.auth.currentUser;\n  }\n\n  async loginWithGoogle(): Promise {\n    const provider = new GoogleAuthProvider();\n    await signInWithPopup(this.auth, provider);\n  }\n\n  async logout(): Promise {\n    await signOut(this.auth);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ColorDirective.html":{"url":"directives/ColorDirective.html","title":"directive - ColorDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  ColorDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/pages/tasks/directives/color.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [nskrColor]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                backgroundColor\n                            \n                            \n                                    Private\n                                colorSignal\n                            \n                            \n                                    Private\n                                prioritySignal\n                            \n                            \n                                    Private\n                                statusSignal\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                priority\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                style.background-color\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    priority\n                                \n                                \n                                    status\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/tasks/directives/color.directive.ts:27\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        priority\n                    \n                \n                \n                    \n                        Type :         Priority | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/tasks/directives/color.directive.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        status\n                    \n                \n                \n                    \n                        Type :         Status | null\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/tasks/directives/color.directive.ts:25\n                            \n                        \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        style.background-color\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/directives/color.directive.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        backgroundColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('style.background-color')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/directives/color.directive.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        colorSignal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/directives/color.directive.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prioritySignal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/directives/color.directive.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusSignal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/directives/color.directive.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        priority\n                    \n                \n\n\n                \n                    \n                        setpriority(value: Priority | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/tasks/directives/color.directive.ts:20\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            Priority | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        status\n                    \n                \n\n\n                \n                    \n                        setstatus(value: Status | null)\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/tasks/directives/color.directive.ts:25\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            Status | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, effect, HostBinding, Input, signal } from '@angular/core';\nimport { Priority, Status } from '../enums';\nimport {\n  DEFAULT_COLOR,\n  priorityColors,\n  statusColors,\n} from '../constants/colors';\n\n@Directive({\n  selector: '[nskrColor]',\n})\nexport class ColorDirective {\n  @HostBinding('style.background-color') backgroundColor!: string | null;\n\n  private prioritySignal = signal(null);\n  private statusSignal = signal(null);\n  private colorSignal = signal(null);\n\n  @Input()\n  set priority(value: Priority | null) {\n    this.prioritySignal.set(value);\n  }\n\n  @Input()\n  set status(value: Status | null) {\n    this.statusSignal.set(value);\n  }\n\n  constructor() {\n    effect(() => {\n      const priority = this.prioritySignal();\n      const status = this.statusSignal();\n\n      if (priority !== null && priority !== undefined) {\n        this.colorSignal.set(priorityColors[priority] || DEFAULT_COLOR);\n      } else if (status !== null && status !== undefined) {\n        this.colorSignal.set(statusColors[status] || DEFAULT_COLOR);\n      } else {\n        throw new Error(\n          '[nskrColor]: Either priority or status must be provided.',\n        );\n      }\n\n      this.backgroundColor = this.colorSignal();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Filters.html":{"url":"interfaces/Filters.html","title":"interface - Filters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Filters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/pages/tasks/interfaces/filters.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            priority\n                                        \n                                \n                                \n                                        \n                                            searchQuery\n                                        \n                                \n                                \n                                        \n                                            sortBy\n                                        \n                                \n                                \n                                        \n                                            sortDirection\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:         \"all\" | Priority\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         \"all\" | Priority\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        searchQuery\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        searchQuery:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sortBy:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortDirection\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sortDirection:         SortDirection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SortDirection\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         \"all\" | Status\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         \"all\" | Status\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Task } from './task.interface';\nimport { Priority, SortDirection, Status } from '../enums';\n\nexport interface Filters {\n  sortBy: keyof Task;\n  sortDirection: SortDirection;\n  status: 'all' | Status;\n  priority: 'all' | Priority;\n  searchQuery: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoadingComponent.html":{"url":"components/LoadingComponent.html","title":"component - LoadingComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoadingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/loading/loading.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-loading\n            \n\n\n            \n                imports\n                \n                            MatProgressSpinner\n                            AsyncPipe\n                \n            \n\n            \n                styleUrls\n                ./loading.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./loading.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loading$\n                            \n                            \n                                    Private\n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        loading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.store.select(selectLoading)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/loading/loading.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/loading/loading.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatProgressSpinner } from '@angular/material/progress-spinner';\nimport { Observable } from 'rxjs';\nimport { AsyncPipe } from '@angular/common';\nimport { selectLoading } from '../../../pages/tasks/state/tasks.selectors';\nimport { Store } from '@ngrx/store';\n\n@Component({\n  selector: 'nskr-loading',\n  imports: [MatProgressSpinner, AsyncPipe],\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoadingComponent {\n  private store: Store = inject(Store);\n  loading$: Observable = this.store.select(selectLoading);\n}\n\n    \n\n    \n        @if (loading$ | async) {\n  \n    \n  \n}\n\n    \n\n    \n                \n                    ./loading.component.scss\n                \n                @use \"mixins\";\n@use \"colors\";\n\n.overlay {\n  width: 100vw;\n  height: 100vh;\n  background-color: colors.$overlay-backdrop-color;\n  @include mixins.flex-row-center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 99;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (loading$ | async) {        }'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'LoadingComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/auth/login/login.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    PageComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-login\n            \n\n\n            \n                imports\n                \n                            MatButtonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                auth\n                            \n                            \n                                    Private\n                                router\n                            \n                            \n                                    \n                                className\n                            \n                            \n                                pageTitle\n                            \n                            \n                                    Protected\n                                route\n                            \n                            \n                                    Private\n                                titleService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loginWithGoogle\n                            \n                            \n                                    Private\n                                setPageTitle\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n    \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'page'\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loginWithGoogle\n                        \n                    \n                \n            \n            \n                \nloginWithGoogle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/auth/login/login.component.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setPageTitle\n                        \n                    \n                \n            \n            \n                \n                        \n                    setPageTitle()\n                \n            \n\n\n                    \n                        \n                            Inherited from         PageComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         PageComponent:18\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : getAuth()\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/login/login.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/auth/login/login.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        className\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'page'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageTitle\n\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ActivatedRoute)\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        titleService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Title)\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { PageComponent } from '@core/base/page';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Router } from '@angular/router';\nimport {\n  getAuth,\n  GoogleAuthProvider,\n  signInWithPopup,\n  UserCredential,\n} from 'firebase/auth';\n\n@Component({\n  selector: 'nskr-login',\n  imports: [MatButtonModule],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n})\nexport class LoginComponent extends PageComponent {\n  private auth = getAuth();\n  private router = inject(Router);\n\n  loginWithGoogle() {\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(this.auth, provider)\n      .then((result: UserCredential) => {\n        const { uid } = result.user;\n        this.router.navigate(['tasks', uid]);\n      })\n      .catch((error: Error) => console.error('Login error:', error));\n  }\n}\n\n    \n\n    \n        \n  Login with Google\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Login with Google'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotFoundComponent.html":{"url":"components/NotFoundComponent.html","title":"component - NotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/not-found/not-found.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    PageComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-not-found\n            \n\n\n            \n                imports\n                \n                            MatIcon\n                            MatButton\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./not-found.component.html\n            \n\n\n\n            \n                styleUrl\n                ./not-found.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                className\n                            \n                            \n                                pageTitle\n                            \n                            \n                                    Protected\n                                route\n                            \n                            \n                                    Private\n                                titleService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                setPageTitle\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n    \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'page'\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setPageTitle\n                        \n                    \n                \n            \n            \n                \n                        \n                    setPageTitle()\n                \n            \n\n\n                    \n                        \n                            Inherited from         PageComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         PageComponent:18\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        className\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'page'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageTitle\n\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ActivatedRoute)\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        titleService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Title)\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { PageComponent } from '@core/base/page';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatButton } from '@angular/material/button';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'nskr-not-found',\n  imports: [MatIcon, MatButton, RouterLink],\n  templateUrl: './not-found.component.html',\n  styleUrl: './not-found.component.scss',\n})\nexport class NotFoundComponent extends PageComponent {}\n\n    \n\n    \n        search_off\n404 - Page Not Found\nWe couldn't find the page you're looking for.\nGo somewhere\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'search_off404 - Page Not FoundWe couldn\\'t find the page you\\'re looking for.Go somewhere'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'NotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/PageComponent.html":{"url":"directives/PageComponent.html","title":"directive - PageComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  PageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/base/page.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                className\n                            \n                            \n                                pageTitle\n                            \n                            \n                                    Protected\n                                route\n                            \n                            \n                                    Private\n                                titleService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                setPageTitle\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/core/base/page.ts:12\n                            \n                        \n\n            \n        \n\n\n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'page'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/base/page.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setPageTitle\n                        \n                    \n                \n            \n            \n                \n                        \n                    setPageTitle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/base/page.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        className\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'page'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/core/base/page.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageTitle\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/base/page.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ActivatedRoute)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/base/page.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        titleService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Title)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/base/page.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostBinding, inject } from '@angular/core';\nimport { PageTitle } from '@core/enums/page-title.enum';\nimport { ActivatedRoute } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\n\n@Directive()\nexport abstract class PageComponent {\n  protected route = inject(ActivatedRoute);\n  private titleService = inject(Title);\n\n  @HostBinding('class') className = 'page';\n  pageTitle!: PageTitle;\n\n  constructor() {\n    this.setPageTitle();\n  }\n\n  private setPageTitle(): void {\n    const title = this.route.snapshot.routeConfig?.title as PageTitle;\n    this.pageTitle = title;\n    this.titleService.setTitle(title);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestStatus.html":{"url":"interfaces/RequestStatus.html","title":"interface - RequestStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/pages/tasks/state/utils/request-status.utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RequestStatus {\n  loading: boolean;\n  error: string | null;\n}\n\nexport const initialRequestStatus: RequestStatus = {\n  loading: false,\n  error: null,\n};\n\nexport const startLoading = (): RequestStatus => ({\n  loading: true,\n  error: null,\n});\n\nexport const requestSuccess = (): RequestStatus => ({\n  loading: false,\n  error: null,\n});\n\nexport const requestFailure = (error: string): RequestStatus => ({\n  loading: false,\n  error,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Task.html":{"url":"interfaces/Task.html","title":"interface - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/pages/tasks/interfaces/task.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            checkMark\n                                        \n                                \n                                \n                                        \n                                            completionDate\n                                        \n                                \n                                \n                                        \n                                            creationDate\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            dueDate\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            priority\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        checkMark\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        checkMark:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        completionDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        completionDate:     Date | Timestamp | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | Timestamp | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creationDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creationDate:     Date | Timestamp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | Timestamp\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dueDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dueDate:     Date | Timestamp\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | Timestamp\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:         Priority\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Priority\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         Status\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Status\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Priority, Status } from '../enums';\nimport { Timestamp } from 'firebase/firestore';\n\nexport interface Task {\n  id: string;\n  checkMark?: boolean;\n  description: string;\n  dueDate: Date | Timestamp;\n  creationDate: Date | Timestamp;\n  status: Status;\n  completionDate: Date | Timestamp | null;\n  priority: Priority;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskAddEditComponent.html":{"url":"components/TaskAddEditComponent.html","title":"component - TaskAddEditComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskAddEditComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/tasks/components/task-add-edit/task-add-edit.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-task-add-edit\n            \n\n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            MatFormFieldModule\n                            MatDatepickerModule\n                            MatDialogModule\n                            MatInput\n                            MatSelect\n                            MatOption\n                            MatIcon\n                            MatMiniFabButton\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task-add-edit.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task-add-edit.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                dialogRef\n                            \n                            \n                                fb\n                            \n                            \n                                priorities\n                            \n                            \n                                statuses\n                            \n                            \n                                taskForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onSave\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-add-edit/task-add-edit.component.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSave\n                        \n                    \n                \n            \n            \n                \nonSave()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-add-edit/task-add-edit.component.ts:81\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(MAT_DIALOG_DATA)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-add-edit/task-add-edit.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(MatDialogRef)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-add-edit/task-add-edit.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fb\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(FormBuilder)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-add-edit/task-add-edit.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        priorities\n                        \n                    \n                \n            \n                \n                    \n                        Default value : priorityMap()\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-add-edit/task-add-edit.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statuses\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(Status)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-add-edit/task-add-edit.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        taskForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.fb.group({\n    description: [\n      this.data?.description || '',\n      [Validators.required, Validators.maxLength(200), xssValidator()],\n    ],\n    dueDate: [\n      this.data?.dueDate || null,\n      {\n        validators: [dueDateValidator()],\n        updateOn: 'blur',\n      },\n    ],\n    creationDate: [\n      { value: this.data?.creationDate || new Date(), disabled: true }, // Заблоковане поле\n      Validators.required,\n    ],\n    completionDate: [\n      { value: this.data?.completionDate || null, disabled: true }, // Заблоковане поле\n    ],\n    status: [this.data?.status || Status.TODO, Validators.required],\n    priority: [this.data?.priority || Priority.LOW, Validators.required],\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-add-edit/task-add-edit.component.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  OnInit,\n} from '@angular/core';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogModule,\n  MatDialogRef,\n} from '@angular/material/dialog';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Priority, Status } from '../../enums';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatOption, MatSelect } from '@angular/material/select';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatMiniFabButton } from '@angular/material/button';\nimport { dueDateValidator, xssValidator } from '@shared/validators';\nimport { priorityMap } from '../../utils/priority-map';\n\n@Component({\n  selector: 'nskr-task-add-edit',\n  imports: [\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatInput,\n    MatSelect,\n    MatOption,\n    MatIcon,\n    MatMiniFabButton,\n  ],\n  templateUrl: './task-add-edit.component.html',\n  styleUrl: './task-add-edit.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaskAddEditComponent implements OnInit {\n  data = inject(MAT_DIALOG_DATA);\n  dialogRef = inject(MatDialogRef);\n  fb = inject(FormBuilder);\n\n  statuses = Object.values(Status);\n  priorities = priorityMap();\n\n  taskForm = this.fb.group({\n    description: [\n      this.data?.description || '',\n      [Validators.required, Validators.maxLength(200), xssValidator()],\n    ],\n    dueDate: [\n      this.data?.dueDate || null,\n      {\n        validators: [dueDateValidator()],\n        updateOn: 'blur',\n      },\n    ],\n    creationDate: [\n      { value: this.data?.creationDate || new Date(), disabled: true }, // Заблоковане поле\n      Validators.required,\n    ],\n    completionDate: [\n      { value: this.data?.completionDate || null, disabled: true }, // Заблоковане поле\n    ],\n    status: [this.data?.status || Status.TODO, Validators.required],\n    priority: [this.data?.priority || Priority.LOW, Validators.required],\n  });\n\n  ngOnInit() {\n    this.taskForm.get('status')?.valueChanges.subscribe((status: Status) => {\n      if (status === Status.DONE) {\n        this.taskForm.get('completionDate')?.setValue(new Date());\n      } else {\n        this.taskForm.get('completionDate')?.setValue(null);\n      }\n    });\n  }\n\n  onSave() {\n    if (this.taskForm.valid) {\n      this.dialogRef.close(this.taskForm.getRawValue());\n    }\n  }\n}\n\n    \n\n    \n        {{ data ? \"Edit Task\" : \"Add Task\" }}\n\n\n  \n    \n      Description\n      \n      @if (taskForm.get(\"description\")?.hasError(\"required\")) {\n        Description is required\n      }\n      @if (taskForm.get(\"description\")?.hasError(\"maxlength\")) {\n        Description cannot exceed 200 characters\n      }\n      @if (taskForm.get(\"description\")?.hasError(\"xssDetected\")) {\n        Invalid characters detected\n      }\n    \n\n    \n      Due Date\n      \n      \n      \n      @if (\n        taskForm.get(\"dueDate\")?.hasError(\"pastDate\") &&\n        taskForm.get(\"dueDate\")?.touched\n      ) {\n        Due date cannot be in the past\n      }\n    \n\n    \n      Status\n      \n        @for (status of statuses; track status) {\n          \n            {{ status }}\n          \n        }\n      \n    \n\n    \n      Priority\n      \n        @for (priority of priorities; track priority) {\n          \n            {{ priority.key }}\n          \n        }\n      \n    \n  \n\n  \n    \n      close\n    \n    \n      checkmark\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ data ? \"Edit Task\" : \"Add Task\" }}            Description            @if (taskForm.get(\"description\")?.hasError(\"required\")) {        Description is required      }      @if (taskForm.get(\"description\")?.hasError(\"maxlength\")) {        Description cannot exceed 200 characters      }      @if (taskForm.get(\"description\")?.hasError(\"xssDetected\")) {        Invalid characters detected      }              Due Date                        @if (        taskForm.get(\"dueDate\")?.hasError(\"pastDate\") &&        taskForm.get(\"dueDate\")?.touched      ) {        Due date cannot be in the past      }              Status              @for (status of statuses; track status) {                      {{ status }}                  }                    Priority              @for (priority of priorities; track priority) {                      {{ priority.key }}                  }                        close              checkmark      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'TaskAddEditComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskDeleteComponent.html":{"url":"components/TaskDeleteComponent.html","title":"component - TaskDeleteComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskDeleteComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/tasks/components/task-delete/task-delete.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-task-delete\n            \n\n\n            \n                imports\n                \n                            MatDialogModule\n                            MatIcon\n                            MatMiniFabButton\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task-delete.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task-delete.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                dialogRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                confirmDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmDelete\n                        \n                    \n                \n            \n            \n                \nconfirmDelete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-delete/task-delete.component.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(MAT_DIALOG_DATA)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-delete/task-delete.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(MatDialogRef)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-delete/task-delete.component.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogModule,\n  MatDialogRef,\n} from '@angular/material/dialog';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatMiniFabButton } from '@angular/material/button';\n\n@Component({\n  selector: 'nskr-task-delete',\n  imports: [MatDialogModule, MatIcon, MatMiniFabButton],\n  templateUrl: './task-delete.component.html',\n  styleUrl: './task-delete.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaskDeleteComponent {\n  data = inject(MAT_DIALOG_DATA);\n  dialogRef = inject(MatDialogRef);\n\n  confirmDelete() {\n    this.dialogRef.close(this.data.id);\n  }\n}\n\n    \n\n    \n        Delete task\n\n  Do you really need to delete task with id\n  {{ data.id }}\n\n\n  \n    close\n  \n  \n    checkmark\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Delete task  Do you really need to delete task with id  {{ data.id }}      close        checkmark  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'TaskDeleteComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskFilterComponent.html":{"url":"components/TaskFilterComponent.html","title":"component - TaskFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/tasks/components/task-filter/task-filter.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-task-filter\n            \n\n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            MatFormFieldModule\n                            MatInputModule\n                            MatSelect\n                            MatOption\n                            MatCheckbox\n                            MatButton\n                            AsyncPipe\n                            MatMenu\n                            MatMenuItem\n                            MatMenuTrigger\n                \n            \n\n            \n                styleUrls\n                ./task-filter.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./task-filter.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                areAllTasksSelected$\n                            \n                            \n                                areSomeTasksSelected$\n                            \n                            \n                                    Private\n                                fb\n                            \n                            \n                                filterForm\n                            \n                            \n                                filtersSub$\n                            \n                            \n                                initFormState\n                            \n                            \n                                priorities\n                            \n                            \n                                selectedTasks$\n                            \n                            \n                                sortBy\n                            \n                            \n                                sortDirections\n                            \n                            \n                                statuses\n                            \n                            \n                                    Private\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearFilters\n                            \n                            \n                                markSelectedAsDone\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleSelectAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearFilters\n                        \n                    \n                \n            \n            \n                \nclearFilters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:99\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markSelectedAsDone\n                        \n                    \n                \n            \n            \n                \nmarkSelectedAsDone()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:84\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:104\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:72\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSelectAll\n                        \n                    \n                \n            \n            \n                \ntoggleSelectAll(selected: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                selected\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        areAllTasksSelected$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.store.select(selectAreAllTasksSelected)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        areSomeTasksSelected$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.store.select(selectAreSomeTasksSelected)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fb\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(FormBuilder)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.fb.group({\n    ...this.initFormState,\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filtersSub$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initFormState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    sortBy: 'creationDate',\n    sortDirection: this.sortDirections[0],\n    status: 'all',\n    priority: 'all',\n    searchQuery: '',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        priorities\n                        \n                    \n                \n            \n                \n                    \n                        Default value : priorityMap()\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedTasks$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.store.select(selectSelectedTasks)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['creationDate', 'dueDate', 'priority', 'status']\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortDirections\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(SortDirection)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statuses\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['all', ...Object.values(Status)]\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-filter/task-filter.component.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { SortDirection, Status } from '../../enums';\nimport { MatOption, MatSelect } from '@angular/material/select';\nimport { MatCheckbox } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { Subscription, take, throttleTime } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport {\n  bulkUpdateTasks,\n  clearFilters,\n  selectAllTasks,\n  setFilters,\n} from '../../state/tasks.actions';\nimport { Filters } from '../../interfaces';\nimport { MatButton } from '@angular/material/button';\nimport {\n  selectAreAllTasksSelected,\n  selectAreSomeTasksSelected,\n  selectSelectedTasks,\n} from '../../state/tasks.selectors';\nimport { AsyncPipe } from '@angular/common';\nimport { priorityMap } from '../../utils/priority-map';\nimport { MatMenu, MatMenuItem, MatMenuTrigger } from '@angular/material/menu';\nimport { Task } from '../../interfaces';\n\n@Component({\n  selector: 'nskr-task-filter',\n  templateUrl: './task-filter.component.html',\n  styleUrls: ['./task-filter.component.scss'],\n  imports: [\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelect,\n    MatOption,\n    MatCheckbox,\n    MatButton,\n    AsyncPipe,\n    MatMenu,\n    MatMenuItem,\n    MatMenuTrigger,\n  ],\n})\nexport class TaskFilterComponent implements OnInit, OnDestroy {\n  private fb = inject(FormBuilder);\n  private store = inject(Store);\n\n  statuses = ['all', ...Object.values(Status)];\n  priorities = priorityMap();\n  sortDirections = Object.values(SortDirection);\n  sortBy = ['creationDate', 'dueDate', 'priority', 'status'];\n\n  initFormState = {\n    sortBy: 'creationDate',\n    sortDirection: this.sortDirections[0],\n    status: 'all',\n    priority: 'all',\n    searchQuery: '',\n  };\n  filterForm = this.fb.group({\n    ...this.initFormState,\n  });\n\n  filtersSub$!: Subscription;\n\n  areAllTasksSelected$ = this.store.select(selectAreAllTasksSelected);\n  areSomeTasksSelected$ = this.store.select(selectAreSomeTasksSelected);\n  selectedTasks$ = this.store.select(selectSelectedTasks);\n\n  ngOnInit() {\n    this.filtersSub$ = this.filterForm.valueChanges\n      .pipe(throttleTime(100))\n      .subscribe((filters) => {\n        this.store.dispatch(setFilters(filters as Filters));\n      });\n  }\n\n  toggleSelectAll(selected: boolean) {\n    this.store.dispatch(selectAllTasks({ selected }));\n  }\n\n  markSelectedAsDone(): void {\n    this.selectedTasks$.pipe(take(1)).subscribe((result: Task[]) => {\n      const taskIds = result.map((task) => task.id);\n      this.store.dispatch(\n        bulkUpdateTasks({\n          taskIds,\n          updatedFields: {\n            status: Status.DONE,\n            completionDate: new Date(),\n          },\n        }),\n      );\n    });\n  }\n\n  clearFilters() {\n    this.filterForm.setValue({ ...this.initFormState });\n    this.store.dispatch(clearFilters());\n  }\n\n  ngOnDestroy() {\n    this.filtersSub$.unsubscribe();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      Sort By:\n      \n        @for (sortProp of sortBy; track sortProp) {\n          {{ sortProp }}\n        }\n      \n    \n\n    \n      Sort direction:\n      \n        @for (sortDirection of sortDirections; track sortDirection) {\n          {{ sortDirection }}\n        }\n      \n    \n  \n\n  \n    \n      Status:\n      \n        @for (status of statuses; track status) {\n          {{ status }}\n        }\n      \n    \n\n    \n      Priority:\n      \n        all\n        @for (priority of priorities; track priority) {\n          {{ priority.key }}\n        }\n      \n    \n\n    \n      Search:\n      \n    \n  \n\n  \n    \n      Select all\n    \n    @if ((selectedTasks$ | async)?.length || 0 > 0) {\n      \n        Mark selected as Done\n      \n      \n        Confirm\n      \n    }\n    Clear filters\n  \n\n\n    \n\n    \n                \n                    ./task-filter.component.scss\n                \n                @use \"mixins\";\n\n:host {\n  --mat-form-field-container-vertical-padding: 0;\n  display: block;\n  width: 100%;\n  position: sticky;\n  top: 0;\n  z-index: 9;\n}\n\n.task-filter {\n  width: 100%;\n  padding-top: 150px;\n}\n\n.filter-section {\n  @include mixins.simple-form-section();\n}\n\n.compact-form-field,\n.compact-checkbox {\n  min-width: 150px;\n  max-width: 200px;\n  margin: 0;\n}\n\n.search-field {\n  flex: 1;\n}\n\n.mat-form-field {\n  margin: 0;\n}\n\n.mat-checkbox {\n  margin-right: 1rem;\n}\n\n.mat-form-field-wrapper {\n  padding-bottom: 0;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Sort By:              @for (sortProp of sortBy; track sortProp) {          {{ sortProp }}        }                    Sort direction:              @for (sortDirection of sortDirections; track sortDirection) {          {{ sortDirection }}        }                        Status:              @for (status of statuses; track status) {          {{ status }}        }                    Priority:              all        @for (priority of priorities; track priority) {          {{ priority.key }}        }                    Search:                        Select all        @if ((selectedTasks$ | async)?.length || 0 > 0) {              Mark selected as Done                    Confirm          }    Clear filters  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'TaskFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskItemComponent.html":{"url":"components/TaskItemComponent.html","title":"component - TaskItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/tasks/components/task-item/task-item.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-task-item\n            \n\n\n            \n                imports\n                \n                            MatCardModule\n                                ColorDirective\n                            MatIcon\n                            MatMiniFabButton\n                            DatePipe\n                            MatCheckbox\n                            ToDatePipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task-item.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task-item.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dialog\n                            \n                            \n                                    Private\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteTask\n                            \n                            \n                                openDeleteTaskDialog\n                            \n                            \n                                openEditTaskDialog\n                            \n                            \n                                toggleTaskSelection\n                            \n                            \n                                updateTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                task\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        task\n                    \n                \n                \n                    \n                        Type :         Task\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/tasks/components/task-item/task-item.component.ts:44\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask\n                        \n                    \n                \n            \n            \n                \ndeleteTask(taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-item/task-item.component.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDeleteTaskDialog\n                        \n                    \n                \n            \n            \n                \nopenDeleteTaskDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-item/task-item.component.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openEditTaskDialog\n                        \n                    \n                \n            \n            \n                \nopenEditTaskDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-item/task-item.component.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleTaskSelection\n                        \n                    \n                \n            \n            \n                \ntoggleTaskSelection(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-item/task-item.component.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTask\n                        \n                    \n                \n            \n            \n                \nupdateTask(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/task-item/task-item.component.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                \n                    \n                        Default value : inject(MatDialog)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-item/task-item.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/task-item/task-item.component.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  Input,\n} from '@angular/core';\nimport { Task } from '../../interfaces';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatMiniFabButton } from '@angular/material/button';\nimport { ColorDirective } from '../../directives/color.directive';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TaskAddEditComponent } from '../task-add-edit/task-add-edit.component';\nimport { Store } from '@ngrx/store';\nimport {\n  updateTask,\n  deleteTask,\n  toggleTaskSelection,\n} from '../../state/tasks.actions';\nimport { TaskDeleteComponent } from '../task-delete/task-delete.component';\nimport { DatePipe } from '@angular/common';\nimport { MatCheckbox } from '@angular/material/checkbox';\nimport { ToDatePipe } from '@shared/pipes/to-date.pipe';\n\n@Component({\n  selector: 'nskr-task-item',\n  imports: [\n    MatCardModule,\n    ColorDirective,\n    MatIcon,\n    MatMiniFabButton,\n    DatePipe,\n    MatCheckbox,\n    ToDatePipe,\n  ],\n  templateUrl: './task-item.component.html',\n  styleUrl: './task-item.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaskItemComponent {\n  private dialog: MatDialog = inject(MatDialog);\n  private store: Store = inject(Store);\n\n  @Input() task!: Task;\n\n  toggleTaskSelection(value: boolean) {\n    this.store.dispatch(\n      toggleTaskSelection({ id: this.task.id, selected: value }),\n    );\n  }\n\n  openEditTaskDialog(): void {\n    const dialogRef = this.dialog.open(TaskAddEditComponent, {\n      data: {\n        ...this.task,\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result: Task | undefined) => {\n      if (result) this.updateTask(result);\n    });\n  }\n\n  updateTask(task: Task): void {\n    const updatedTask: Partial = { ...task };\n    this.store.dispatch(updateTask({ taskId: this.task.id, updatedTask }));\n  }\n\n  openDeleteTaskDialog(): void {\n    const dialogRef = this.dialog.open(TaskDeleteComponent, {\n      data: {\n        id: this.task.id,\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((result: string | undefined) => {\n      if (result) this.deleteTask(result);\n    });\n  }\n\n  deleteTask(taskId: string): void {\n    this.store.dispatch(deleteTask({ taskId }));\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n      NSKR-{{ task.id }}\n    \n    {{ task.status }}\n  \n  \n    \n      {{ task.description }}\n      \n        Due Date: {{ task.dueDate | toDate | date: \"dd/MM/yyyy\" }}\n      \n      @if (task.completionDate) {\n        \n          Completion Date:\n          {{ task.completionDate | toDate | date: \"dd/MM/yyyy\" }}\n        \n      }\n    \n  \n  \n    \n      \n    \n    \n      \n        edit\n      \n      \n        delete\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  NSKR-{{ task.id }}        {{ task.status }}              {{ task.description }}              Due Date: {{ task.dueDate | toDate | date: \"dd/MM/yyyy\" }}            @if (task.completionDate) {                  Completion Date:          {{ task.completionDate | toDate | date: \"dd/MM/yyyy\" }}              }                                        edit                    delete            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'TaskItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskListComponent.html":{"url":"components/TaskListComponent.html","title":"component - TaskListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TaskListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/tasks/components/task-list/task-list.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-task-list\n            \n\n\n            \n                imports\n                \n                            AsyncPipe\n                                TaskItemComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./task-list.component.html\n            \n\n\n\n            \n                styleUrl\n                ./task-list.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                tasks$\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        tasks$\n                    \n                \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/pages/tasks/components/task-list/task-list.component.ts:15\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Task } from '../../interfaces';\nimport { AsyncPipe } from '@angular/common';\nimport { TaskItemComponent } from '../task-item/task-item.component';\n\n@Component({\n  selector: 'nskr-task-list',\n  imports: [AsyncPipe, TaskItemComponent],\n  templateUrl: './task-list.component.html',\n  styleUrl: './task-list.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaskListComponent {\n  @Input() tasks$!: Observable;\n}\n\n    \n\n    \n        \n  @if ({ v: tasks$ | async }; as tasks) {\n    @for (task of tasks.v; track task.id) {\n      \n    }\n\n    @if (!tasks.v || tasks.v.length === 0) {\n      There is no tasks for this user\n    }\n  }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  @if ({ v: tasks$ | async }; as tasks) {    @for (task of tasks.v; track task.id) {          }    @if (!tasks.v || tasks.v.length === 0) {      There is no tasks for this user    }  }'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'TaskListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TasksComponent.html":{"url":"components/TasksComponent.html","title":"component - TasksComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TasksComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/tasks/tasks.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    PageComponent\n    \n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-tasks\n            \n\n\n            \n                imports\n                \n                                UserComponent\n                                TaskListComponent\n                                TaskFilterComponent\n                            MatButton\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./tasks.component.html\n            \n\n\n\n            \n                styleUrl\n                ./tasks.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dialog\n                            \n                            \n                                    Private\n                                store\n                            \n                            \n                                tasks$\n                            \n                            \n                                    \n                                className\n                            \n                            \n                                pageTitle\n                            \n                            \n                                    Protected\n                                route\n                            \n                            \n                                    Private\n                                titleService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addTask\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openAddTaskDialog\n                            \n                            \n                                    Private\n                                setPageTitle\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n\n\n\n    \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'page'\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addTask\n                        \n                    \n                \n            \n            \n                \naddTask(task: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/tasks.component.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/tasks.component.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openAddTaskDialog\n                        \n                    \n                \n            \n            \n                \nopenAddTaskDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/tasks.component.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setPageTitle\n                        \n                    \n                \n            \n            \n                \n                        \n                    setPageTitle()\n                \n            \n\n\n                    \n                        \n                            Inherited from         PageComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         PageComponent:18\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                \n                    \n                        Default value : inject(MatDialog)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/tasks.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/tasks.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tasks$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.store.select(selectFilteredAndSortedTasks)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/tasks.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        className\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'page'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pageTitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageTitle\n\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ActivatedRoute)\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        titleService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Title)\n                    \n                \n                        \n                            \n                                Inherited from         PageComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         PageComponent:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, OnInit } from '@angular/core';\nimport { UserComponent } from './components/user/user.component';\nimport { PageComponent } from '@core/base/page';\nimport { Store } from '@ngrx/store';\nimport { selectFilteredAndSortedTasks } from './state/tasks.selectors';\nimport { createTask, loadTasks } from './state/tasks.actions';\nimport { Task } from './interfaces';\nimport { Observable } from 'rxjs';\nimport { TaskListComponent } from './components/task-list/task-list.component';\nimport { TaskFilterComponent } from './components/task-filter/task-filter.component';\nimport { MatButton } from '@angular/material/button';\nimport { MatDialog } from '@angular/material/dialog';\nimport { TaskAddEditComponent } from './components/task-add-edit/task-add-edit.component';\n\n@Component({\n  selector: 'nskr-tasks',\n  imports: [UserComponent, TaskListComponent, TaskFilterComponent, MatButton],\n  templateUrl: './tasks.component.html',\n  styleUrl: './tasks.component.scss',\n})\nexport class TasksComponent extends PageComponent implements OnInit {\n  private store: Store = inject(Store);\n  private dialog: MatDialog = inject(MatDialog);\n\n  tasks$: Observable = this.store.select(selectFilteredAndSortedTasks);\n\n  ngOnInit(): void {\n    this.store.dispatch(loadTasks());\n  }\n\n  openAddTaskDialog(): void {\n    const dialogRef = this.dialog.open(TaskAddEditComponent);\n\n    dialogRef.afterClosed().subscribe((result: Task | undefined) => {\n      if (result) this.addTask(result);\n    });\n  }\n\n  addTask(task: Partial): void {\n    const newTask: Task = {\n      creationDate: new Date(),\n      completionDate: null,\n      ...task,\n    } as Task;\n    this.store.dispatch(createTask({ task: newTask }));\n  }\n}\n\n    \n\n    \n        \n\nAdd Task\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Add Task'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'TasksComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksEffects.html":{"url":"injectables/TasksEffects.html","title":"injectable - TasksEffects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/pages/tasks/state/tasks.effects.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                actions$\n                            \n                            \n                                bulkUpdateTasks$\n                            \n                            \n                                createTask$\n                            \n                            \n                                deleteTask$\n                            \n                            \n                                loadTasks$\n                            \n                            \n                                reloadTasksAfterActions$\n                            \n                            \n                                    Private\n                                tasksService\n                            \n                            \n                                updateTask$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        actions$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Actions\n\n                    \n                \n                \n                    \n                        Default value : inject(Actions)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/state/tasks.effects.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bulkUpdateTasks$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.bulkUpdateTasks),\n      mergeMap(({ taskIds, updatedFields }) =>\n        this.tasksService.bulkUpdate(taskIds, updatedFields).pipe(\n          map(() =>\n            TasksActions.bulkUpdateTasksSuccess({ taskIds, updatedFields }),\n          ),\n          catchError((error) =>\n            of(TasksActions.bulkUpdateTasksFailure({ error: error.message })),\n          ),\n        ),\n      ),\n    ),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/state/tasks.effects.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createTask$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.createTask),\n      mergeMap(({ task }) =>\n        this.tasksService.createTask(task).pipe(\n          map(() => TasksActions.createTaskSuccess({ task })),\n          catchError((error) =>\n            of(TasksActions.createTaskFailure({ error: error.message })),\n          ),\n        ),\n      ),\n    ),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/state/tasks.effects.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.deleteTask),\n      mergeMap(({ taskId }) =>\n        this.tasksService.deleteTask(taskId).pipe(\n          map(() => TasksActions.deleteTaskSuccess({ taskId })),\n          catchError((error) =>\n            of(TasksActions.deleteTaskFailure({ error: error.message })),\n          ),\n        ),\n      ),\n    ),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/state/tasks.effects.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadTasks$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.loadTasks),\n      mergeMap(() =>\n        this.tasksService.getTasksForUser().pipe(\n          map((tasks) => TasksActions.loadTasksSuccess({ tasks })),\n          catchError((error) =>\n            of(TasksActions.loadTasksFailure({ error: error.message })),\n          ),\n        ),\n      ),\n    ),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/state/tasks.effects.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadTasksAfterActions$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.actions$.pipe(\n      ofType(\n        TasksActions.createTaskSuccess,\n        TasksActions.updateTaskSuccess,\n        TasksActions.deleteTaskSuccess,\n        TasksActions.bulkUpdateTasksSuccess,\n      ),\n      map(() => TasksActions.loadTasks()),\n    ),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/state/tasks.effects.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        tasksService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TasksService\n\n                    \n                \n                \n                    \n                        Default value : inject(TasksService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/state/tasks.effects.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTask$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.updateTask),\n      mergeMap(({ taskId, updatedTask }) =>\n        this.tasksService.updateTask(taskId, updatedTask).pipe(\n          map(() => TasksActions.updateTaskSuccess({ taskId, updatedTask })),\n          catchError((error) =>\n            of(TasksActions.updateTaskFailure({ error: error.message })),\n          ),\n        ),\n      ),\n    ),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/state/tasks.effects.ts:40\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as TasksActions from './tasks.actions';\nimport { TasksService } from '../services/tasks.service';\nimport { catchError, map, mergeMap, of } from 'rxjs';\n\n@Injectable()\nexport class TasksEffects {\n  private actions$: Actions = inject(Actions);\n  private tasksService: TasksService = inject(TasksService);\n\n  loadTasks$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.loadTasks),\n      mergeMap(() =>\n        this.tasksService.getTasksForUser().pipe(\n          map((tasks) => TasksActions.loadTasksSuccess({ tasks })),\n          catchError((error) =>\n            of(TasksActions.loadTasksFailure({ error: error.message })),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  createTask$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.createTask),\n      mergeMap(({ task }) =>\n        this.tasksService.createTask(task).pipe(\n          map(() => TasksActions.createTaskSuccess({ task })),\n          catchError((error) =>\n            of(TasksActions.createTaskFailure({ error: error.message })),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  updateTask$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.updateTask),\n      mergeMap(({ taskId, updatedTask }) =>\n        this.tasksService.updateTask(taskId, updatedTask).pipe(\n          map(() => TasksActions.updateTaskSuccess({ taskId, updatedTask })),\n          catchError((error) =>\n            of(TasksActions.updateTaskFailure({ error: error.message })),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  deleteTask$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.deleteTask),\n      mergeMap(({ taskId }) =>\n        this.tasksService.deleteTask(taskId).pipe(\n          map(() => TasksActions.deleteTaskSuccess({ taskId })),\n          catchError((error) =>\n            of(TasksActions.deleteTaskFailure({ error: error.message })),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  bulkUpdateTasks$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.bulkUpdateTasks),\n      mergeMap(({ taskIds, updatedFields }) =>\n        this.tasksService.bulkUpdate(taskIds, updatedFields).pipe(\n          map(() =>\n            TasksActions.bulkUpdateTasksSuccess({ taskIds, updatedFields }),\n          ),\n          catchError((error) =>\n            of(TasksActions.bulkUpdateTasksFailure({ error: error.message })),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  reloadTasksAfterActions$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(\n        TasksActions.createTaskSuccess,\n        TasksActions.updateTaskSuccess,\n        TasksActions.deleteTaskSuccess,\n        TasksActions.bulkUpdateTasksSuccess,\n      ),\n      map(() => TasksActions.loadTasks()),\n    ),\n  );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/pages/tasks/services/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authService\n                            \n                            \n                                    Private\n                                firestore\n                            \n                            \n                                    Private\n                                toasterService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                bulkUpdate\n                            \n                            \n                                createTask\n                            \n                            \n                                deleteTask\n                            \n                            \n                                getTasksForUser\n                            \n                            \n                                updateTask\n                            \n                            \n                                    Private\n                                withToast\n                            \n                            \n                                    Private\n                                withUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        bulkUpdate\n                        \n                    \n                \n            \n            \n                \nbulkUpdate(taskIds: string[], updatedFields: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/services/tasks.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatedFields\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createTask\n                        \n                    \n                \n            \n            \n                \ncreateTask(task: Task)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/services/tasks.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            Task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask\n                        \n                    \n                \n            \n            \n                \ndeleteTask(taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/services/tasks.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTasksForUser\n                        \n                    \n                \n            \n            \n                \ngetTasksForUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/services/tasks.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTask\n                        \n                    \n                \n            \n            \n                \nupdateTask(taskId: string, updatedTask: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/services/tasks.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatedTask\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        withToast\n                        \n                    \n                \n            \n            \n                \n                        \n                    withToast(source$: Observable, successMessage: string, errorMessage: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/services/tasks.service.ts:130\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                source$\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                successMessage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                errorMessage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        withUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    withUserId(operation: (userId: string) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/services/tasks.service.ts:118\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                operation\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/services/tasks.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(FIRESTORE)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/services/tasks.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toasterService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ToasterService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/services/tasks.service.ts:33\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport {\n  Observable,\n  from,\n  of,\n  forkJoin,\n  tap,\n  catchError,\n  throwError,\n} from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport {\n  collection,\n  getDocs,\n  doc,\n  updateDoc,\n  deleteDoc,\n  addDoc,\n  CollectionReference,\n  Timestamp,\n} from 'firebase/firestore';\nimport { Task } from '../interfaces';\nimport { AuthService } from '@core/services/auth.service';\nimport { ToasterService } from '@shared/services/toaster.service';\nimport { FIRESTORE } from '../../../firebase.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TasksService {\n  private firestore = inject(FIRESTORE);\n  private authService = inject(AuthService);\n  private toasterService = inject(ToasterService);\n\n  getTasksForUser(): Observable {\n    return this.withUserId((userId: string) => {\n      const tasksCollection = collection(\n        this.firestore,\n        `users/${userId}/tasks`,\n      ) as CollectionReference;\n\n      return from(getDocs(tasksCollection)).pipe(\n        mergeMap((querySnapshot) => {\n          const tasks: Task[] = [];\n          querySnapshot.forEach((docSnap) => {\n            const snapshot = docSnap.data() as Task;\n            tasks.push({\n              ...snapshot,\n              id: docSnap.id,\n              checkMark: false,\n              creationDate: (snapshot.creationDate as Timestamp).toDate(),\n              dueDate: (snapshot.dueDate as Timestamp).toDate(),\n              completionDate: snapshot.completionDate\n                ? (snapshot.completionDate as Timestamp).toDate()\n                : null,\n            });\n          });\n          return of(tasks);\n        }),\n      );\n    });\n  }\n\n  createTask(task: Task): Observable {\n    return this.withUserId((userId: string) => {\n      const tasksCollection = collection(\n        this.firestore,\n        `users/${userId}/tasks`,\n      ) as CollectionReference;\n\n      return this.withToast(\n        from(addDoc(tasksCollection, task)),\n        'Task created',\n        'Task creation failed',\n      );\n    });\n  }\n\n  updateTask(taskId: string, updatedTask: Partial): Observable {\n    return this.withUserId((userId: string) => {\n      const taskDoc = doc(this.firestore, `users/${userId}/tasks/${taskId}`);\n      return this.withToast(\n        from(updateDoc(taskDoc, updatedTask)),\n        'Task updated',\n        'Task update failed',\n      );\n    });\n  }\n\n  deleteTask(taskId: string): Observable {\n    return this.withUserId((userId: string) => {\n      const taskDoc = doc(this.firestore, `users/${userId}/tasks/${taskId}`);\n      return this.withToast(\n        from(deleteDoc(taskDoc)),\n        'Task deleted',\n        'Deleting task failed',\n      );\n    });\n  }\n\n  bulkUpdate(\n    taskIds: string[],\n    updatedFields: Partial,\n  ): Observable {\n    return this.withUserId((userId: string) => {\n      const updateTasks$ = taskIds.map((taskId) => {\n        const taskDoc = doc(this.firestore, `users/${userId}/tasks/${taskId}`);\n        return from(updateDoc(taskDoc, updatedFields));\n      });\n      return this.withToast(\n        forkJoin(updateTasks$),\n        'Tasks updated',\n        'Updating tasks failed',\n      );\n    });\n  }\n\n  private withUserId(\n    operation: (userId: string) => Observable,\n  ): Observable {\n    const currentUser = this.authService.getCurrentUser();\n\n    if (!currentUser) {\n      return throwError(() => new Error('User not authenticated'));\n    }\n\n    return operation(currentUser.uid);\n  }\n\n  private withToast(\n    source$: Observable,\n    successMessage: string,\n    errorMessage: string,\n  ): Observable {\n    return source$.pipe(\n      tap(() => {\n        this.toasterService.showSuccessMessage(successMessage);\n      }),\n      catchError((error) => {\n        this.toasterService.showErrorMessage(errorMessage);\n        return throwError(() => error);\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TasksState.html":{"url":"interfaces/TasksState.html","title":"interface - TasksState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TasksState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/pages/tasks/state/tasks.state.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            filters\n                                        \n                                \n                                \n                                        \n                                            requestStatus\n                                        \n                                \n                                \n                                        \n                                            tasks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filters\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filters:         Filters\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Filters\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requestStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requestStatus:         RequestStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RequestStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tasks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tasks:         Task[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Task[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Filters, Task } from '../interfaces';\nimport { initialRequestStatus, RequestStatus } from './utils';\nimport { SortDirection } from '../enums';\n\nexport interface TasksState {\n  tasks: Task[];\n  requestStatus: RequestStatus;\n  filters: Filters;\n}\n\nexport const initialTasksState: TasksState = {\n  tasks: [],\n  requestStatus: initialRequestStatus,\n  filters: {\n    sortBy: 'creationDate',\n    sortDirection: SortDirection.ASC,\n    status: 'all',\n    priority: 'all',\n    searchQuery: '',\n  },\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ThemeComponent.html":{"url":"components/ThemeComponent.html","title":"component - ThemeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ThemeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/theme/theme.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-theme\n            \n\n\n            \n                imports\n                \n                            MatButtonModule\n                \n            \n\n\n            \n                styles\n                \n      button {\n        position: fixed;\n        top: 15px;\n        left: 15px;\n        z-index: 10;\n      }\n    \n            \n\n            \n                template\n                \n  {{ themeService.currentTheme ? 'Light Theme' : 'Dark Theme' }}\n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                themeService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggleTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(themeService: ThemeService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/theme/theme.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        themeService\n                                                  \n                                                        \n                                                                        ThemeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toggleTheme\n                        \n                    \n                \n            \n            \n                \ntoggleTheme()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/theme/theme.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        themeService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThemeService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/theme/theme.component.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ThemeService } from '@shared/components/theme/theme.service';\nimport { MatButtonModule } from '@angular/material/button';\n\n@Component({\n  selector: 'nskr-theme',\n  imports: [MatButtonModule],\n  template: `\n    \n      {{ themeService.currentTheme ? 'Light Theme' : 'Dark Theme' }}\n    \n  `,\n  styles: [\n    `\n      button {\n        position: fixed;\n        top: 15px;\n        left: 15px;\n        z-index: 10;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ThemeComponent {\n  constructor(public themeService: ThemeService) {}\n\n  toggleTheme(): void {\n    this.themeService.toggleTheme();\n  }\n}\n\n    \n\n\n    \n            \n      button {\n        position: fixed;\n        top: 15px;\n        left: 15px;\n        z-index: 10;\n      }\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{ themeService.currentTheme ? \\'Light Theme\\' : \\'Dark Theme\\' }}'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'ThemeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThemeService.html":{"url":"injectables/ThemeService.html","title":"injectable - ThemeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ThemeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/components/theme/theme.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                DARK_THEME_CLASS\n                            \n                            \n                                    Private\n                                isDarkMode\n                            \n                            \n                                    Private\n                                    Readonly\n                                THEME_STORAGE_KEY\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyTheme\n                            \n                            \n                                    Private\n                                loadThemeFromLocalStorage\n                            \n                            \n                                    Private\n                                saveThemeToLocalStorage\n                            \n                            \n                                setTheme\n                            \n                            \n                                toggleTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentTheme\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/theme/theme.service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        applyTheme\n                        \n                    \n                \n            \n            \n                \n                        \n                    applyTheme(isDarkMode: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/theme/theme.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isDarkMode\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadThemeFromLocalStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadThemeFromLocalStorage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/theme/theme.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saveThemeToLocalStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveThemeToLocalStorage(isDarkMode: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/theme/theme.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isDarkMode\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTheme\n                        \n                    \n                \n            \n            \n                \nsetTheme(isDarkMode: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/theme/theme.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isDarkMode\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleTheme\n                        \n                    \n                \n            \n            \n                \ntoggleTheme()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/theme/theme.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        DARK_THEME_CLASS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'dark-theme'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/theme/theme.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isDarkMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/theme/theme.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        THEME_STORAGE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isDarkMode'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/theme/theme.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentTheme\n                    \n                \n\n                \n                    \n                        getcurrentTheme()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/components/theme/theme.service.ts:28\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  private readonly DARK_THEME_CLASS = 'dark-theme';\n  private readonly THEME_STORAGE_KEY = 'isDarkMode';\n  private isDarkMode!: boolean;\n\n  constructor() {\n    this.isDarkMode = this.loadThemeFromLocalStorage();\n    this.applyTheme(this.isDarkMode);\n  }\n\n  toggleTheme(): void {\n    this.isDarkMode = !this.isDarkMode;\n    this.applyTheme(this.isDarkMode);\n    this.saveThemeToLocalStorage(this.isDarkMode);\n  }\n\n  setTheme(isDarkMode: boolean): void {\n    this.isDarkMode = isDarkMode;\n    this.applyTheme(this.isDarkMode);\n    this.saveThemeToLocalStorage(this.isDarkMode);\n  }\n\n  get currentTheme(): boolean {\n    return this.isDarkMode;\n  }\n\n  private applyTheme(isDarkMode: boolean): void {\n    if (isDarkMode) {\n      document.body.classList.add(this.DARK_THEME_CLASS);\n    } else {\n      document.body.classList.remove(this.DARK_THEME_CLASS);\n    }\n  }\n\n  private saveThemeToLocalStorage(isDarkMode: boolean): void {\n    localStorage.setItem(this.THEME_STORAGE_KEY, JSON.stringify(isDarkMode));\n  }\n\n  private loadThemeFromLocalStorage(): boolean {\n    const savedTheme = localStorage.getItem(this.THEME_STORAGE_KEY);\n    return savedTheme !== null ? JSON.parse(savedTheme) : false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/ToDatePipe.html":{"url":"pipes/ToDatePipe.html","title":"pipe - ToDatePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  ToDatePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/pipes/to-date.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        toDate\n                    \n                    \n                        Pure\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: Date | Timestamp | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/pipes/to-date.pipe.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        Date | Timestamp | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Date | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { Timestamp } from 'firebase/firestore';\n\n@Pipe({ name: 'toDate', pure: true })\nexport class ToDatePipe implements PipeTransform {\n  transform(value: Date | Timestamp | null): Date | null {\n    if (!value) {\n      return null;\n    }\n    if (value instanceof Timestamp) {\n      return value.toDate();\n    }\n    return value as Date;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ToasterService.html":{"url":"injectables/ToasterService.html","title":"injectable - ToasterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ToasterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/toaster.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _snackBar\n                            \n                            \n                                    Private\n                                defaultConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _showMessage\n                            \n                            \n                                showErrorMessage\n                            \n                            \n                                showSuccessMessage\n                            \n                            \n                                showWarningMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _showMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    _showMessage(message: string, panelClass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/toaster.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                panelClass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showErrorMessage\n                        \n                    \n                \n            \n            \n                \nshowErrorMessage(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/toaster.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showSuccessMessage\n                        \n                    \n                \n            \n            \n                \nshowSuccessMessage(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/toaster.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showWarningMessage\n                        \n                    \n                \n            \n            \n                \nshowWarningMessage(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/toaster.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _snackBar\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(MatSnackBar)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/toaster.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        defaultConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatSnackBarConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    duration: 3000,\n    horizontalPosition: 'center',\n    verticalPosition: 'bottom',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/toaster.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToasterService {\n  private _snackBar = inject(MatSnackBar);\n\n  private defaultConfig: MatSnackBarConfig = {\n    duration: 3000,\n    horizontalPosition: 'center',\n    verticalPosition: 'bottom',\n  };\n\n  showSuccessMessage(message: string) {\n    this._showMessage(message, 'message-success');\n  }\n\n  showWarningMessage(message: string) {\n    this._showMessage(message, 'message-warning');\n  }\n\n  showErrorMessage(message: string) {\n    this._showMessage(message, 'message-error');\n  }\n\n  private _showMessage(message: string, panelClass: string) {\n    this._snackBar.open(message, 'X', {\n      ...this.defaultConfig,\n      panelClass,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UserComponent.html":{"url":"components/UserComponent.html","title":"component - UserComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  UserComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/tasks/components/user/user.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nskr-user\n            \n\n\n            \n                imports\n                \n                            MatCard\n                            MatCardContent\n                            MatCardActions\n                            MatButton\n                            MatDivider\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./user.component.html\n            \n\n\n\n            \n                styleUrl\n                ./user.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                authService\n                            \n                            \n                                currentUser\n                            \n                            \n                                    Private\n                                router\n                            \n                            \n                                    Private\n                                toasterService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/user/user.component.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/tasks/components/user/user.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/user/user.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/user/user.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/user/user.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toasterService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ToasterService)\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/tasks/components/user/user.component.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {\n  ChangeDetectionStrategy,\n  Component,\n  inject,\n  OnInit,\n} from '@angular/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardContent,\n} from '@angular/material/card';\nimport { MatButton } from '@angular/material/button';\nimport { AuthService } from '@core/services/auth.service';\nimport { ToasterService } from '@shared/services/toaster.service';\nimport { Router } from '@angular/router';\nimport { MatDivider } from '@angular/material/divider';\nimport { User } from 'firebase/auth';\n\n@Component({\n  selector: 'nskr-user',\n  imports: [MatCard, MatCardContent, MatCardActions, MatButton, MatDivider],\n  templateUrl: './user.component.html',\n  styleUrl: './user.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserComponent implements OnInit {\n  private authService = inject(AuthService);\n  private toasterService = inject(ToasterService);\n  private router = inject(Router);\n\n  currentUser!: User | null;\n\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentUser();\n  }\n\n  logout(): void {\n    this.authService.logout().then(() => {\n      this.toasterService.showWarningMessage('User logged out');\n      this.router.navigate(['/auth']);\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    {{ currentUser?.email }}\n  \n  \n  \n    Logout\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ currentUser?.email }}          Logout  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'nskr-root'},{'name': 'LoadingComponent', 'selector': 'nskr-loading'},{'name': 'LoginComponent', 'selector': 'nskr-login'},{'name': 'NotFoundComponent', 'selector': 'nskr-not-found'},{'name': 'TaskAddEditComponent', 'selector': 'nskr-task-add-edit'},{'name': 'TaskDeleteComponent', 'selector': 'nskr-task-delete'},{'name': 'TaskFilterComponent', 'selector': 'nskr-task-filter'},{'name': 'TaskItemComponent', 'selector': 'nskr-task-item'},{'name': 'TaskListComponent', 'selector': 'nskr-task-list'},{'name': 'TasksComponent', 'selector': 'nskr-tasks'},{'name': 'ThemeComponent', 'selector': 'nskr-theme'},{'name': 'UserComponent', 'selector': 'nskr-user'}];\n    var DIRECTIVES = [{'name': 'ColorDirective', 'selector': '[nskrColor]'},{'name': 'PageComponent', 'selector': ''}];\n    var ACTUAL_COMPONENT = {'name': 'UserComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/base/page.ts\n            \n            directive\n            PageComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/app/core/guards/auth.guard.ts\n            \n            variable\n            authGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/guards/non-auth.guard.ts\n            \n            variable\n            nonAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/app/firebase.config.ts\n            \n            variable\n            appFirebaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/firebase.config.ts\n            \n            variable\n            FIREBASE_APP\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/firebase.config.ts\n            \n            variable\n            FIREBASE_AUTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/firebase.config.ts\n            \n            variable\n            FIRESTORE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/pages/auth/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/pages/not-found/not-found.component.ts\n            \n            component\n            NotFoundComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/components/task-add-edit/task-add-edit.component.ts\n            \n            component\n            TaskAddEditComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/components/task-delete/task-delete.component.ts\n            \n            component\n            TaskDeleteComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/components/task-filter/task-filter.component.ts\n            \n            component\n            TaskFilterComponent\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/components/task-item/task-item.component.ts\n            \n            component\n            TaskItemComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/components/task-list/task-list.component.ts\n            \n            component\n            TaskListComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/components/user/user.component.ts\n            \n            component\n            UserComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/constants/colors.ts\n            \n            variable\n            DEFAULT_COLOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/constants/colors.ts\n            \n            variable\n            priorityColors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/constants/colors.ts\n            \n            variable\n            statusColors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/directives/color.directive.ts\n            \n            directive\n            ColorDirective\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/interfaces/filters.interface.ts\n            \n            interface\n            Filters\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/interfaces/task.interface.ts\n            \n            interface\n            Task\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/services/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            bulkUpdateTasks\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            bulkUpdateTasksFailure\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            bulkUpdateTasksSuccess\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            clearFilters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            createTask\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            createTaskFailure\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            createTaskSuccess\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            deleteTask\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            deleteTaskFailure\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            deleteTaskSuccess\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            loadTasks\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            loadTasksFailure\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            loadTasksSuccess\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            selectAllTasks\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            setFilters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            toggleTaskSelection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            updateTask\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            updateTaskFailure\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.actions.ts\n            \n            variable\n            updateTaskSuccess\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/state/tasks.effects.ts\n            \n            injectable\n            TasksEffects\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.reducer.ts\n            \n            variable\n            tasksReducer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.selectors.ts\n            \n            variable\n            selectAreAllTasksSelected\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.selectors.ts\n            \n            variable\n            selectAreSomeTasksSelected\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.selectors.ts\n            \n            variable\n            selectError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.selectors.ts\n            \n            variable\n            selectFilteredAndSortedTasks\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.selectors.ts\n            \n            variable\n            selectFilters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.selectors.ts\n            \n            variable\n            selectLoading\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.selectors.ts\n            \n            variable\n            selectSelectedTasks\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.selectors.ts\n            \n            variable\n            selectTasks\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.selectors.ts\n            \n            variable\n            selectTasksState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/state/tasks.state.ts\n            \n            interface\n            TasksState\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/tasks.state.ts\n            \n            variable\n            initialTasksState\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/utils/filter.utils.ts\n            \n            variable\n            filterByPriority\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/utils/filter.utils.ts\n            \n            variable\n            filterBySearchQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/utils/filter.utils.ts\n            \n            variable\n            filterByStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/utils/filter.utils.ts\n            \n            variable\n            sortTasks\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/state/utils/request-status.utils.ts\n            \n            interface\n            RequestStatus\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/utils/request-status.utils.ts\n            \n            variable\n            initialRequestStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/utils/request-status.utils.ts\n            \n            variable\n            requestFailure\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/utils/request-status.utils.ts\n            \n            variable\n            requestSuccess\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/state/utils/request-status.utils.ts\n            \n            variable\n            startLoading\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/pages/tasks/tasks.component.ts\n            \n            component\n            TasksComponent\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/app/pages/tasks/utils/priority-map.ts\n            \n            variable\n            priorityMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/components/loading/loading.component.ts\n            \n            component\n            LoadingComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/components/theme/theme.component.ts\n            \n            component\n            ThemeComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/shared/components/theme/theme.service.ts\n            \n            injectable\n            ThemeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/shared/pipes/to-date.pipe.ts\n            \n            pipe\n            ToDatePipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/services/toaster.service.ts\n            \n            injectable\n            ToasterService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/app/shared/validators/due-date.validator.ts\n            \n            function\n            dueDateValidator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/shared/validators/xss.vaidator.ts\n            \n            function\n            xssValidator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/store.ts\n            \n            variable\n            appStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/environments/environment.example.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.0.0\n        \n            @angular/cdk : ^19.0.4\n        \n            @angular/common : ^19.0.0\n        \n            @angular/compiler : ^19.0.0\n        \n            @angular/core : ^19.0.0\n        \n            @angular/forms : ^19.0.0\n        \n            @angular/material : ^19.0.4\n        \n            @angular/platform-browser : ^19.0.0\n        \n            @angular/platform-browser-dynamic : ^19.0.0\n        \n            @angular/router : ^19.0.0\n        \n            @ngrx/effects : ^19.0.0\n        \n            @ngrx/entity : ^19.0.0\n        \n            @ngrx/store : ^19.0.0\n        \n            @ngrx/store-devtools : ^19.0.0\n        \n            firebase : ^11.1.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PageTitle   (src/.../page-title.enum.ts)\n                        \n                        \n                            Priority   (src/.../priority.enum.ts)\n                        \n                        \n                            SortDirection   (src/.../sort-direction.enum.ts)\n                        \n                        \n                            Status   (src/.../status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/enums/page-title.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PageTitle\n                    \n                \n                        \n                            \n                                 TASKS\n                            \n                        \n                        \n                            \n                                Value : Tasks\n                            \n                        \n                        \n                            \n                                 LOGIN\n                            \n                        \n                        \n                            \n                                Value : Login\n                            \n                        \n                        \n                            \n                                 NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : Not Found\n                            \n                        \n            \n        \n\n    src/app/pages/tasks/enums/priority.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Priority\n                    \n                \n                        \n                            \n                                 LOW\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 MEDIUM\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 HIGH\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n            \n        \n\n    src/app/pages/tasks/enums/sort-direction.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        SortDirection\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : asc\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : desc\n                            \n                        \n            \n        \n\n    src/app/pages/tasks/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 TODO\n                            \n                        \n                        \n                            \n                                Value : To do\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : In Progress\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : Review\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : Done\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dueDateValidator   (src/.../due-date.validator.ts)\n                        \n                        \n                            xssValidator   (src/.../xss.vaidator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/validators/due-date.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dueDateValidator\n                        \n                    \n                \n            \n            \n                \ndueDateValidator()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                \n            \n        \n    \n    src/app/shared/validators/xss.vaidator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        xssValidator\n                        \n                    \n                \n            \n            \n                \nxssValidator()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNskrTodo\nThis project was generated using Angular CLI version 19.0.0.\nNodeJS Setup\nProject requires NodeJS v20.\nUse Fast Node Manager (FNM) to install nodejs. \nSetup --use-on-cd feature (https://www.freecodecamp.org/news/fnm-fast-node-manager/) for better experience with changing versions for different projects.\nInstalling packages\nExample :npm installEnvironment\nApplication uses Firebase for Authentication and CloudFirestore, before start a project you'll need to setup Firebase project (https://console.firebase.google.com/)\nAnd then replace fields in environment.ts\nExample :export const environment = {\n  production: false,\n  firebaseConfig: {\n    apiKey: 'YOUR_API_KEY',\n    appId: 'YOUR_APP_ID',\n    authDomain: 'YOUR_AUTH_DOMAIN', \n    messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\n    projectId: 'YOUR_PROJECT_ID',\n    storageBucket: 'YOUR_STORAGE_BUCKET',\n  },\n};Development server\nTo start a local development server, run:\nExample :npm startOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nBuilding\nTo build the project run:\nExample :npm run buildFor production build run:\nExample :npm run build:prodThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nDeploy\nDeploy pipeline to Firebase Hosting\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    12 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            appFirebaseConfig   (src/.../firebase.config.ts)\n                        \n                        \n                            appStore   (src/.../store.ts)\n                        \n                        \n                            authGuard   (src/.../auth.guard.ts)\n                        \n                        \n                            bulkUpdateTasks   (src/.../tasks.actions.ts)\n                        \n                        \n                            bulkUpdateTasksFailure   (src/.../tasks.actions.ts)\n                        \n                        \n                            bulkUpdateTasksSuccess   (src/.../tasks.actions.ts)\n                        \n                        \n                            clearFilters   (src/.../tasks.actions.ts)\n                        \n                        \n                            createTask   (src/.../tasks.actions.ts)\n                        \n                        \n                            createTaskFailure   (src/.../tasks.actions.ts)\n                        \n                        \n                            createTaskSuccess   (src/.../tasks.actions.ts)\n                        \n                        \n                            DEFAULT_COLOR   (src/.../colors.ts)\n                        \n                        \n                            deleteTask   (src/.../tasks.actions.ts)\n                        \n                        \n                            deleteTaskFailure   (src/.../tasks.actions.ts)\n                        \n                        \n                            deleteTaskSuccess   (src/.../tasks.actions.ts)\n                        \n                        \n                            environment   (src/.../environment.example.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            filterByPriority   (src/.../filter.utils.ts)\n                        \n                        \n                            filterBySearchQuery   (src/.../filter.utils.ts)\n                        \n                        \n                            filterByStatus   (src/.../filter.utils.ts)\n                        \n                        \n                            FIREBASE_APP   (src/.../firebase.config.ts)\n                        \n                        \n                            FIREBASE_AUTH   (src/.../firebase.config.ts)\n                        \n                        \n                            FIRESTORE   (src/.../firebase.config.ts)\n                        \n                        \n                            initialRequestStatus   (src/.../request-status.utils.ts)\n                        \n                        \n                            initialTasksState   (src/.../tasks.state.ts)\n                        \n                        \n                            loadTasks   (src/.../tasks.actions.ts)\n                        \n                        \n                            loadTasksFailure   (src/.../tasks.actions.ts)\n                        \n                        \n                            loadTasksSuccess   (src/.../tasks.actions.ts)\n                        \n                        \n                            nonAuthGuard   (src/.../non-auth.guard.ts)\n                        \n                        \n                            priorityColors   (src/.../colors.ts)\n                        \n                        \n                            priorityMap   (src/.../priority-map.ts)\n                        \n                        \n                            requestFailure   (src/.../request-status.utils.ts)\n                        \n                        \n                            requestSuccess   (src/.../request-status.utils.ts)\n                        \n                        \n                            selectAllTasks   (src/.../tasks.actions.ts)\n                        \n                        \n                            selectAreAllTasksSelected   (src/.../tasks.selectors.ts)\n                        \n                        \n                            selectAreSomeTasksSelected   (src/.../tasks.selectors.ts)\n                        \n                        \n                            selectError   (src/.../tasks.selectors.ts)\n                        \n                        \n                            selectFilteredAndSortedTasks   (src/.../tasks.selectors.ts)\n                        \n                        \n                            selectFilters   (src/.../tasks.selectors.ts)\n                        \n                        \n                            selectLoading   (src/.../tasks.selectors.ts)\n                        \n                        \n                            selectSelectedTasks   (src/.../tasks.selectors.ts)\n                        \n                        \n                            selectTasks   (src/.../tasks.selectors.ts)\n                        \n                        \n                            selectTasksState   (src/.../tasks.selectors.ts)\n                        \n                        \n                            setFilters   (src/.../tasks.actions.ts)\n                        \n                        \n                            sortTasks   (src/.../filter.utils.ts)\n                        \n                        \n                            startLoading   (src/.../request-status.utils.ts)\n                        \n                        \n                            statusColors   (src/.../colors.ts)\n                        \n                        \n                            tasksReducer   (src/.../tasks.reducer.ts)\n                        \n                        \n                            toggleTaskSelection   (src/.../tasks.actions.ts)\n                        \n                        \n                            updateTask   (src/.../tasks.actions.ts)\n                        \n                        \n                            updateTaskFailure   (src/.../tasks.actions.ts)\n                        \n                        \n                            updateTaskSuccess   (src/.../tasks.actions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideAnimationsAsync(),\n    provideNativeDateAdapter(),\n    ...appStore,\n    ...appFirebaseConfig,\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/firebase.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appFirebaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: FIREBASE_APP,\n    useFactory: () => initializeApp(environment.firebaseConfig),\n  },\n  {\n    provide: FIREBASE_AUTH,\n    useFactory: (app: FirebaseApp) => getAuth(app),\n    deps: [FIREBASE_APP],\n  },\n  {\n    provide: FIRESTORE,\n    useFactory: (app: FirebaseApp) => getFirestore(app),\n    deps: [FIREBASE_APP],\n  },\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FIREBASE_APP\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('FirebaseApp')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FIREBASE_AUTH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('FirebaseAuth')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FIRESTORE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('Firestore')\n                    \n                \n\n\n        \n    \n\n    src/app/store.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appStore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  provideStore({\n    tasks: tasksReducer,\n  }),\n  provideEffects([TasksEffects]),\n  provideStoreDevtools({ maxAge: 25, logOnly: environment.production }),\n]\n                    \n                \n\n\n        \n    \n\n    src/app/core/guards/auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authGuard\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CanActivateFn\n\n                    \n                \n                \n                    \n                        Default value : (): Observable => {\n  const router = inject(Router);\n  const auth = getAuth();\n\n  return new Observable((observer) => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        observer.next(true);\n      } else {\n        observer.next(router.createUrlTree(['/auth']));\n      }\n      observer.complete();\n    });\n\n    return { unsubscribe };\n  });\n}\n                    \n                \n\n\n        \n    \n\n    src/app/pages/tasks/state/tasks.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bulkUpdateTasks\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Bulk Update Tasks',\n  props }>(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bulkUpdateTasksFailure\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Bulk Update Tasks Failure',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bulkUpdateTasksSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Bulk Update Tasks Success',\n  props }>(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearFilters\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[Tasks] Clear Filters')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createTask\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Create Task',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createTaskFailure\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Create Task Failure',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createTaskSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Create Task Success',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTask\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Delete Task',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTaskFailure\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Delete Task Failure',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTaskSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Delete Task Success',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadTasks\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[Tasks] Load Tasks')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadTasksFailure\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Load Tasks Failure',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadTasksSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Load Tasks Success',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectAllTasks\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Select All Tasks',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFilters\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[Tasks] Set Filters', props())\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleTaskSelection\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Toggle Task Selection',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTask\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Update Task',\n  props }>(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTaskFailure\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Update Task Failure',\n  props(),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTaskSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction(\n  '[Tasks] Update Task Success',\n  props }>(),\n)\n                    \n                \n\n\n        \n    \n\n    src/app/pages/tasks/constants/colors.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_COLOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'white'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        priorityColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  [Priority.LOW]: '#4caf50',\n  [Priority.MEDIUM]: '#ff9800',\n  [Priority.HIGH]: '#f44336',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusColors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  [Status.TODO]: 'lightgray',\n  [Status.IN_PROGRESS]: 'lightblue',\n  [Status.REVIEW]: 'saddlebrown',\n  [Status.DONE]: 'lightgreen',\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.example.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n  firebaseConfig: {\n    apiKey: 'YOUR_API_KEY',\n    appId: 'YOUR_APP_ID',\n    authDomain: 'YOUR_AUTH_DOMAIN',\n    messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\n    projectId: 'YOUR_PROJECT_ID',\n    storageBucket: 'YOUR_STORAGE_BUCKET',\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n  firebaseConfig: {\n    apiKey: \"AIzaSyAlGOPFI46UX1P_vrYFbgvKfdSeawvY174\",\n    appId: \"1:144738632001:web:165d873992cf9a771fa1c0\",\n    authDomain: \"nskr-todo.firebaseapp.com\",\n    messagingSenderId: \"144738632001\",\n    projectId: \"nskr-todo\",\n    storageBucket: \"nskr-todo.firebasestorage.app\"\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n  firebaseConfig: {\n    apiKey: 'YOUR_API_KEY',\n    appId: 'YOUR_APP_ID',\n    authDomain: 'YOUR_AUTH_DOMAIN',\n    messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\n    projectId: 'YOUR_PROJECT_ID',\n    storageBucket: 'YOUR_STORAGE_BUCKET',\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/app/pages/tasks/state/utils/filter.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        filterByPriority\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  tasks: Task[],\n  priority: Priority | 'all',\n): Task[] => {\n  if (priority === 'all') return tasks;\n  return tasks.filter((task) => task.priority === priority);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterBySearchQuery\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  tasks: Task[],\n  searchQuery: string,\n): Task[] => {\n  const lowerCaseQuery = searchQuery.toLowerCase();\n  return tasks.filter((task) =>\n    task.description.toLowerCase().includes(lowerCaseQuery),\n  );\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterByStatus\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  tasks: Task[],\n  status: Status | 'all',\n): Task[] => {\n  if (status === 'all') return tasks;\n  return tasks.filter((task) => task.status === status);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortTasks\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  tasks: Task[],\n  sortBy: keyof Task,\n  sortDirection: 'asc' | 'desc',\n): Task[] => {\n  const direction = sortDirection === 'asc' ? 1 : -1;\n\n  return [...tasks].sort((a, b) => {\n    const aValue = a[sortBy];\n    const bValue = b[sortBy];\n\n    if (aValue == null || bValue == null) return 0; // Безпечна перевірка\n\n    if (aValue  bValue) return 1 * direction;\n    return 0;\n  });\n}\n                    \n                \n\n\n        \n    \n\n    src/app/pages/tasks/state/utils/request-status.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initialRequestStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RequestStatus\n\n                    \n                \n                \n                    \n                        Default value : {\n  loading: false,\n  error: null,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestFailure\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (error: string): RequestStatus => ({\n  loading: false,\n  error,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): RequestStatus => ({\n  loading: false,\n  error: null,\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startLoading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): RequestStatus => ({\n  loading: true,\n  error: null,\n})\n                    \n                \n\n\n        \n    \n\n    src/app/pages/tasks/state/tasks.state.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initialTasksState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TasksState\n\n                    \n                \n                \n                    \n                        Default value : {\n  tasks: [],\n  requestStatus: initialRequestStatus,\n  filters: {\n    sortBy: 'creationDate',\n    sortDirection: SortDirection.ASC,\n    status: 'all',\n    priority: 'all',\n    searchQuery: '',\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/app/core/guards/non-auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nonAuthGuard\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CanActivateFn\n\n                    \n                \n                \n                    \n                        Default value : () => {\n  const router = inject(Router);\n  const auth = getAuth();\n\n  const authState$ = new Observable((observer) => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      observer.next(user);\n      observer.complete();\n    });\n    return { unsubscribe };\n  });\n\n  return authState$.pipe(\n    map((currentUser) => {\n      if (currentUser) {\n        return router.createUrlTree(['tasks', currentUser.uid]);\n      } else {\n        return true;\n      }\n    }),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/app/pages/tasks/utils/priority-map.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        priorityMap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () =>\n  Object.keys(Priority)\n    .filter((key) => isNaN(Number(key)))\n    .map((key) => ({\n      key: key.toLowerCase(),\n      value: Priority[key as keyof typeof Priority],\n    }))\n                    \n                \n\n\n        \n    \n\n    src/app/pages/tasks/state/tasks.selectors.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        selectAreAllTasksSelected\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(\n  selectFilteredAndSortedTasks,\n  (tasks) => tasks.length > 0 && tasks.every((task) => task.checkMark),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectAreSomeTasksSelected\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(\n  selectFilteredAndSortedTasks,\n  (tasks) => {\n    const totalTasks = tasks.length;\n    const selectedTasks = tasks.filter((task) => task.checkMark).length;\n    return selectedTasks > 0 && selectedTasks \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(\n  selectTasksState,\n  (state) => state.requestStatus.error,\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectFilteredAndSortedTasks\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(\n  selectTasks,\n  selectFilters,\n  (tasks: Task[], filters: Filters) => {\n    let filteredTasks: Task[] = [...tasks];\n\n    filteredTasks = sortTasks(\n      filteredTasks,\n      filters.sortBy,\n      filters.sortDirection,\n    );\n    filteredTasks = filterByStatus(filteredTasks, filters.status);\n    filteredTasks = filterByPriority(filteredTasks, filters.priority);\n    filteredTasks = filterBySearchQuery(filteredTasks, filters.searchQuery);\n\n    return filteredTasks;\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectFilters\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(\n  selectTasksState,\n  (state) => state.filters,\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectLoading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(\n  selectTasksState,\n  (state) => state.requestStatus.loading,\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectSelectedTasks\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(\n  selectFilteredAndSortedTasks,\n  (tasks) => tasks.filter((task) => task.checkMark),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectTasks\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(\n  selectTasksState,\n  (state) => state.tasks,\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectTasksState\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createFeatureSelector('tasks')\n                    \n                \n\n\n        \n    \n\n    src/app/pages/tasks/state/tasks.reducer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        tasksReducer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createReducer(\n  initialTasksState,\n\n  on(TasksActions.loadTasks, (state) => ({\n    ...state,\n    requestStatus: startLoading(),\n  })),\n  on(TasksActions.loadTasksSuccess, (state, { tasks }) => ({\n    ...state,\n    tasks,\n    requestStatus: requestSuccess(),\n  })),\n  on(TasksActions.loadTasksFailure, (state, { error }) => ({\n    ...state,\n    requestStatus: requestFailure(error),\n  })),\n\n  on(TasksActions.createTask, (state) => ({\n    ...state,\n    requestStatus: startLoading(),\n  })),\n  on(TasksActions.createTaskSuccess, (state, { task }) => ({\n    ...state,\n    tasks: [...state.tasks, task],\n    requestStatus: requestSuccess(),\n  })),\n  on(TasksActions.createTaskFailure, (state, { error }) => ({\n    ...state,\n    requestStatus: requestFailure(error),\n  })),\n\n  on(TasksActions.updateTask, (state) => ({\n    ...state,\n    requestStatus: startLoading(),\n  })),\n  on(TasksActions.updateTaskSuccess, (state, { taskId, updatedTask }) => ({\n    ...state,\n    tasks: state.tasks.map((task) =>\n      task.id === taskId ? { ...task, ...updatedTask } : task,\n    ),\n    requestStatus: requestSuccess(),\n  })),\n  on(TasksActions.updateTaskFailure, (state, { error }) => ({\n    ...state,\n    requestStatus: requestFailure(error),\n  })),\n\n  on(TasksActions.deleteTask, (state) => ({\n    ...state,\n    requestStatus: startLoading(),\n  })),\n  on(TasksActions.deleteTaskSuccess, (state, { taskId }) => ({\n    ...state,\n    tasks: state.tasks.filter((task) => task.id !== taskId),\n    requestStatus: requestSuccess(),\n  })),\n  on(TasksActions.deleteTaskFailure, (state, { error }) => ({\n    ...state,\n    requestStatus: requestFailure(error),\n  })),\n\n  on(TasksActions.bulkUpdateTasks, (state) => ({\n    ...state,\n    requestStatus: startLoading(),\n  })),\n  on(\n    TasksActions.bulkUpdateTasksSuccess,\n    (state, { taskIds, updatedFields }) => ({\n      ...state,\n      tasks: state.tasks.map((task) =>\n        taskIds.includes(task.id || '') ? { ...task, ...updatedFields } : task,\n      ),\n      requestStatus: requestSuccess(),\n    }),\n  ),\n  on(TasksActions.bulkUpdateTasksFailure, (state, { error }) => ({\n    ...state,\n    requestStatus: requestFailure(error),\n  })),\n\n  on(\n    TasksActions.setFilters,\n    (state, { sortBy, sortDirection, status, priority, searchQuery }) => ({\n      ...state,\n      filters: {\n        ...state.filters,\n        ...(sortBy !== undefined ? { sortBy } : {}),\n        ...(sortDirection !== undefined ? { sortDirection } : {}),\n        ...(status !== undefined ? { status } : {}),\n        ...(priority !== undefined ? { priority } : {}),\n        ...(searchQuery !== undefined ? { searchQuery } : {}),\n      },\n    }),\n  ),\n\n  on(TasksActions.clearFilters, (state) => ({\n    ...state,\n    filters: initialTasksState.filters,\n  })),\n\n  on(TasksActions.toggleTaskSelection, (state, { id, selected }) => ({\n    ...state,\n    tasks: state.tasks.map((task) =>\n      task.id === id ? { ...task, checkMark: selected } : task,\n    ),\n  })),\n  on(TasksActions.selectAllTasks, (state, { selected }) => ({\n    ...state,\n    tasks: state.tasks.map((task) => ({\n      ...task,\n      checkMark: selected,\n    })),\n  })),\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
